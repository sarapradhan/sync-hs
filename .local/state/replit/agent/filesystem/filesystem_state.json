{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Zoo - Student Assignment Management System\n\n## Overview\n\nZoo is a full-stack web application designed to help students manage their academic assignments and tasks. The application supports multiple students (Zoo and Nish) and provides features for creating, tracking, and organizing assignments with calendar integration and progress monitoring. Built with a modern React frontend and Express.js backend, it offers both desktop and mobile-responsive interfaces with a Material Design-inspired UI.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **Build Tool**: Vite for fast development and optimized production builds\n- **UI Components**: Radix UI primitives with shadcn/ui components for consistent design\n- **Styling**: Tailwind CSS with Material Design color scheme and custom CSS variables\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **Form Handling**: React Hook Form with Zod validation for type-safe forms\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API endpoints following standard HTTP conventions\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Validation**: Zod schemas shared between frontend and backend\n- **Development**: Hot reloading with Vite middleware integration\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL hosted on Neon Database (@neondatabase/serverless)\n- **ORM**: Drizzle ORM with schema-first approach for type safety\n- **Migrations**: Drizzle Kit for database schema management\n- **In-Memory Fallback**: MemStorage class for development/testing without database connection\n\n### Database Schema Design\n- **Users Table**: Multi-user support with Zoo and Nish as default students, including name, email, and avatar fields\n- **Assignments Table**: Core entity with user association, fields for title, description, subject, due date, priority, status, progress, and timestamps\n- **Subjects Table**: Reference data for assignment categorization with color coding and teacher information\n- **Shared Types**: TypeScript interfaces generated from Drizzle schemas ensuring type consistency\n\n### UI/UX Design Patterns\n- **Material Design**: Google Material Design principles with custom color palette\n- **Responsive Design**: Mobile-first approach with dedicated mobile navigation\n- **Component Architecture**: Reusable UI components with consistent styling\n- **Progressive Enhancement**: Core functionality works without JavaScript\n- **Accessibility**: ARIA labels and semantic HTML structure\n\n### Authentication and Authorization\n- **Session Management**: Express sessions with PostgreSQL session store (connect-pg-simple)\n- **Security**: CORS configuration and secure session handling\n- **User Context**: Prepared for multi-user scenarios with session-based authentication\n\n## Recent Changes\n\n### Comprehensive Delete Functionality (December 18, 2024)\n- Implemented complete delete system across all views with confirmation dialogs\n- Added individual assignment delete buttons on cards and summary table rows\n- Created bulk \"Clear All Assignments\" functionality with safety confirmations\n- Built comprehensive \"Clear All Data\" feature in dashboard quick actions\n- Added success/error notifications for all delete operations\n- Ensured real-time UI updates after deletions with proper cache invalidation\n\n### Automated Test Suite (December 18, 2024)\n- Built comprehensive testing framework with unit, integration, and E2E capabilities\n- Created 28 unit tests covering storage layer, components, and utilities (26/28 passing)\n- Implemented MSW (Mock Service Worker) for API mocking in tests\n- Added component testing with React Testing Library for user interactions\n- Built automated test scripts with coverage reporting and CI/CD readiness\n- Structured tests with proper isolation, cleanup, and TypeScript type safety\n\n### Summary View Table Redesign (December 18, 2024)\n- Reorganized table columns to prioritize key information: Class, Assignment, Due Date, Due Time, Type, Status, Points Earned/Possible, Grade, Days Until\n- Implemented real-time days calculation based on current date vs due date\n- Added smart date display with urgency color coding (red ≤1 day, yellow ≤3 days)\n- Combined points earned/possible into single column format\n- Removed unnecessary columns (description, todo, progress) for cleaner interface\n- Enhanced mobile responsiveness by reducing column count from 12 to 9\n\n### Subject Color-Coding System (December 18, 2024)\n- Built interactive SubjectBadge and SubjectDot components with customizable colors\n- Created subject color manager with color picker interface\n- Added Subjects page with full color customization functionality\n- Implemented API endpoints for updating subject colors with persistence\n- Applied color coding consistently across dashboard, assignments, and summary views\n- Added Subjects navigation to both desktop and mobile navigation menus\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, React Router (Wouter)\n- **TypeScript**: Full TypeScript support across frontend and backend\n- **Build Tools**: Vite, esbuild for production builds\n- **Node.js**: Express.js server with TypeScript support\n\n### Database and ORM\n- **Neon Database**: Serverless PostgreSQL hosting (@neondatabase/serverless)\n- **Drizzle ORM**: Type-safe database operations with schema generation\n- **Database Tools**: Drizzle Kit for migrations and schema management\n\n### UI and Styling\n- **Radix UI**: Comprehensive set of accessible UI primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom configuration\n- **Material Icons**: Google Material Icons font for consistent iconography\n- **Class Variance Authority**: Type-safe CSS class variants\n\n### Form and Validation\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Zod**: Runtime type validation with TypeScript integration\n- **Hookform Resolvers**: Zod integration for React Hook Form\n\n### State Management and API\n- **TanStack Query**: Server state management with caching and synchronization\n- **Date-fns**: Date manipulation and formatting utilities\n\n### Development and Testing\n- **Replit Integration**: Replit-specific plugins for development environment\n- **PostCSS**: CSS processing with Tailwind CSS integration\n- **ESLint/Prettier**: Code formatting and linting (configured in components.json)\n\n### Planned Integrations\n- **Google Calendar API**: For assignment due date synchronization\n- **Google Sheets API**: For data export functionality\n- **Notification System**: Browser notifications for assignment reminders","size_bytes":6915},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Material Design Colors\n        \"material-blue\": {\n          50: \"var(--material-blue-50)\",\n          500: \"var(--material-blue-500)\",\n          700: \"var(--material-blue-700)\",\n        },\n        \"material-green\": {\n          500: \"var(--material-green-500)\",\n          600: \"var(--material-green-600)\",\n        },\n        \"material-orange\": {\n          500: \"var(--material-orange-500)\",\n          600: \"var(--material-orange-600)\",\n        },\n        \"material-red\": {\n          500: \"var(--material-red-500)\",\n          600: \"var(--material-red-600)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        roboto: [\"'Roboto'\", \"sans-serif\"],\n      },\n      boxShadow: {\n        \"material-1\": \"var(--shadow-material-1)\",\n        \"material-2\": \"var(--shadow-material-2)\",\n        \"material-3\": \"var(--shadow-material-3)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3565},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import passport from 'passport';\nimport { Strategy as GoogleStrategy } from 'passport-google-oauth20';\nimport session from 'express-session';\nimport connectPgSimple from 'connect-pg-simple';\nimport type { Express } from 'express';\nimport { storage } from './storage';\n\nconst PgSession = connectPgSimple(session);\n\nexport function setupAuth(app: Express) {\n  // Session configuration\n  const sessionStore = new PgSession({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    tableName: 'session'\n  });\n\n  app.use(session({\n    store: sessionStore,\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n    }\n  }));\n\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Configure Google OAuth strategy\n  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n    passport.use(new GoogleStrategy({\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      callbackURL: `https://${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}/auth/google/callback`\n    }, async (accessToken: string, refreshToken: string, profile: any, done: any) => {\n      try {\n        // Extract user info from Google profile\n        const googleId = profile.id;\n        const email = profile.emails?.[0]?.value || '';\n        const name = profile.displayName || '';\n        const avatar = profile.photos?.[0]?.value || null;\n\n        // Try to find existing user by email\n        let user = await storage.getUserByEmail(email);\n        \n        if (!user) {\n          // Create new user\n          user = await storage.createUser({\n            name,\n            email,\n            avatar,\n            googleId,\n          });\n        } else {\n          // Update existing user with Google info\n          user = await storage.updateUser(user.id, {\n            name,\n            avatar,\n            googleId,\n          });\n        }\n\n        return done(null, user);\n      } catch (error) {\n        console.error('Google OAuth error:', error);\n        return done(error, null);\n      }\n    }));\n  }\n\n  // Serialize/deserialize user for sessions\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error, null);\n    }\n  });\n\n  // Auth routes - only add if Google OAuth is configured\n  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n    app.get('/auth/google', \n      passport.authenticate('google', { scope: ['profile', 'email'] })\n    );\n\n    app.get('/auth/google/callback',\n      passport.authenticate('google', { \n        successRedirect: '/',\n        failureRedirect: '/login'\n      })\n    );\n  } else {\n    // Fallback routes when Google OAuth is not configured\n    app.get('/auth/google', (req, res) => {\n      res.status(503).json({ error: 'Google OAuth not configured. Please provide GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET.' });\n    });\n\n    app.get('/auth/google/callback', (req, res) => {\n      res.status(503).json({ error: 'Google OAuth not configured.' });\n    });\n  }\n\n  app.post('/auth/logout', (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ error: 'Logout failed' });\n      }\n      res.json({ success: true });\n    });\n  });\n\n  app.get('/auth/user', (req, res) => {\n    if (req.isAuthenticated()) {\n      res.json(req.user);\n    } else {\n      res.status(401).json({ error: 'Not authenticated' });\n    }\n  });\n}\n\n// Middleware to protect routes\nexport function requireAuth(req: any, res: any, next: any) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ error: 'Authentication required' });\n}","size_bytes":3958},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import 'dotenv/config';\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2090},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":4974},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertAssignmentSchema, updateAssignmentSchema, insertSubjectSchema } from \"@shared/schema\";\nimport { ObjectStorageService } from \"./objectStorage\";\nimport { z } from \"zod\";\nimport * as XLSX from \"xlsx\";\nimport { calendarService } from \"./calendar\";\nimport { userCalendarTokens } from \"./userCalendarTokens\";\n\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // User routes\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Data management routes\n  app.delete(\"/api/data/clear\", async (req, res) => {\n    try {\n      await storage.clearAllData();\n      res.json({ message: \"All data cleared successfully\" });\n    } catch (error) {\n      console.error(\"Error clearing data:\", error);\n      res.status(500).json({ error: \"Failed to clear data\" });\n    }\n  });\n\n  app.get(\"/api/users/current\", async (req, res) => {\n    try {\n      const user = await storage.getCurrentUser();\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch current user\" });\n    }\n  });\n\n  app.post(\"/api/users/switch\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n      const user = await storage.switchUser(userId);\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to switch user\" });\n    }\n  });\n\n  // Assignment routes\n  app.get(\"/api/assignments\", async (req, res) => {\n    try {\n      const { status, subject } = req.query;\n      \n      let assignments;\n      if (status && typeof status === 'string') {\n        assignments = await storage.getAssignmentsByStatus(status);\n      } else if (subject && typeof subject === 'string') {\n        assignments = await storage.getAssignmentsBySubject(subject);\n      } else {\n        assignments = await storage.getAssignments();\n      }\n      \n      res.json(assignments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch assignments\" });\n    }\n  });\n\n  app.get(\"/api/assignments/upcoming\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const assignments = await storage.getUpcomingAssignments(limit);\n      res.json(assignments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch upcoming assignments\" });\n    }\n  });\n\n  app.get(\"/api/assignments/:id\", async (req, res) => {\n    try {\n      const assignment = await storage.getAssignment(req.params.id);\n      if (!assignment) {\n        return res.status(404).json({ message: \"Assignment not found\" });\n      }\n      res.json(assignment);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch assignment\" });\n    }\n  });\n\n  app.post(\"/api/assignments\", async (req, res) => {\n    try {\n      const currentUser = await storage.getCurrentUser();\n      const validatedData = insertAssignmentSchema.parse(req.body);\n      const { syncToCalendar } = req.body;\n      \n      // Add userId to the assignment data\n      const assignmentData = {\n        ...validatedData,\n        userId: currentUser.id\n      };\n      \n      // Create the assignment first\n      const assignment = await storage.createAssignment(assignmentData);\n      \n      // If calendar sync is requested and user has tokens, create calendar event\n      if (syncToCalendar) {\n        const userTokens = userCalendarTokens.getTokens(currentUser.id);\n        \n        if (userTokens) {\n          const eventId = await calendarService.createAssignmentEvent(assignment, userTokens);\n          if (eventId) {\n            // Update assignment with calendar event ID\n            await storage.updateAssignment(assignment.id, { googleCalendarEventId: eventId });\n            assignment.googleCalendarEventId = eventId;\n          }\n        }\n      }\n      \n      res.status(201).json(assignment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid assignment data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create assignment\" });\n    }\n  });\n\n  app.put(\"/api/assignments/:id\", async (req, res) => {\n    try {\n      const validatedData = updateAssignmentSchema.parse(req.body);\n      const assignment = await storage.updateAssignment(req.params.id, validatedData);\n      if (!assignment) {\n        return res.status(404).json({ message: \"Assignment not found\" });\n      }\n      \n      // If assignment has a calendar event, update it\n      if (assignment.googleCalendarEventId) {\n        const currentUser = await storage.getCurrentUser();\n        const userTokens = userCalendarTokens.getTokens(currentUser.id);\n        \n        if (userTokens) {\n          await calendarService.updateAssignmentEvent(\n            assignment.googleCalendarEventId, \n            assignment, \n            userTokens\n          );\n        }\n      }\n      \n      res.json(assignment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid assignment data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update assignment\" });\n    }\n  });\n\n  app.delete(\"/api/assignments/:id\", async (req, res) => {\n    try {\n      // Get assignment first to check for calendar event\n      const assignment = await storage.getAssignment(req.params.id);\n      \n      const deleted = await storage.deleteAssignment(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Assignment not found\" });\n      }\n      \n      // If assignment had a calendar event, delete it\n      if (assignment?.googleCalendarEventId) {\n        const currentUser = await storage.getCurrentUser();\n        const userTokens = userCalendarTokens.getTokens(currentUser.id);\n        \n        if (userTokens) {\n          await calendarService.deleteAssignmentEvent(\n            assignment.googleCalendarEventId, \n            userTokens\n          );\n        }\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete assignment\" });\n    }\n  });\n\n  // Delete all assignments (for clearing duplicates)\n  app.delete(\"/api/assignments\", async (req, res) => {\n    try {\n      await storage.clearAllAssignments();\n      res.json({ message: \"All assignments deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete assignments\" });\n    }\n  });\n\n  // Subject routes\n  app.get(\"/api/subjects\", async (req, res) => {\n    try {\n      const subjects = await storage.getSubjects();\n      res.json(subjects);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch subjects\" });\n    }\n  });\n\n  app.patch(\"/api/subjects/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const updatedSubject = await storage.updateSubject(id, updates);\n      if (!updatedSubject) {\n        return res.status(404).json({ message: \"Subject not found\" });\n      }\n      \n      res.json(updatedSubject);\n    } catch (error) {\n      console.error(\"Error updating subject:\", error);\n      res.status(500).json({ message: \"Failed to update subject\" });\n    }\n  });\n\n  app.delete(\"/api/subjects/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteSubject(req.params.id);\n      if (success) {\n        res.json({ message: \"Subject deleted successfully\" });\n      } else {\n        res.status(404).json({ error: \"Subject not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting subject:\", error);\n      res.status(500).json({ error: \"Failed to delete subject\" });\n    }\n  });\n\n  app.post(\"/api/subjects\", async (req, res) => {\n    try {\n      const validatedData = insertSubjectSchema.parse(req.body);\n      const subject = await storage.createSubject(validatedData);\n      res.status(201).json(subject);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid subject data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create subject\" });\n    }\n  });\n\n  // Stats endpoint\n  app.get(\"/api/stats\", async (req, res) => {\n    try {\n      const assignments = await storage.getAssignments();\n      const now = new Date();\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      const weekFromNow = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n\n      const stats = {\n        dueToday: assignments.filter(a => {\n          const dueDate = new Date(a.dueDate);\n          const dueDateOnly = new Date(dueDate.getFullYear(), dueDate.getMonth(), dueDate.getDate());\n          return dueDateOnly.getTime() === today.getTime() && a.status !== 'completed';\n        }).length,\n        thisWeek: assignments.filter(a => {\n          const dueDate = new Date(a.dueDate);\n          return dueDate >= today && dueDate <= weekFromNow && a.status !== 'completed';\n        }).length,\n        completed: assignments.filter(a => a.status === 'completed').length,\n        totalActive: assignments.filter(a => a.status !== 'completed').length,\n      };\n\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  // Google Calendar integration endpoints (mock)\n  app.post(\"/api/google/calendar/import\", async (req, res) => {\n    try {\n      // Mock implementation - in real app would integrate with Google Calendar API\n      res.json({ message: \"Calendar import functionality would be implemented here\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to import from Google Calendar\" });\n    }\n  });\n\n  // Google Sheets export endpoint (mock)\n  app.post(\"/api/google/sheets/export\", async (req, res) => {\n    try {\n      // Mock implementation - in real app would integrate with Google Sheets API\n      const assignments = await storage.getAssignments();\n      res.json({ \n        message: \"Sheets export functionality would be implemented here\",\n        data: assignments\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to export to Google Sheets\" });\n    }\n  });\n\n  // Direct file upload for spreadsheets - using dynamic import for ES modules\n  const multer = (await import('multer')).default;\n  const upload = multer({\n    storage: multer.memoryStorage(),\n    limits: {\n      fileSize: 10 * 1024 * 1024, // 10MB limit\n    },\n    fileFilter: (req: any, file: any, cb: any) => {\n      const allowedTypes = [\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx\n        'application/vnd.ms-excel', // .xls\n        'text/csv', // .csv\n        'text/plain', // Sometimes CSV files are detected as plain text\n        'application/csv', // Alternative CSV MIME type\n        'application/octet-stream' // Generic binary - check extension\n      ];\n      \n      // Also check file extension as backup\n      const allowedExtensions = ['.xlsx', '.xls', '.csv'];\n      const hasValidExtension = allowedExtensions.some(ext => \n        file.originalname.toLowerCase().endsWith(ext)\n      );\n      \n      if (allowedTypes.includes(file.mimetype) || hasValidExtension) {\n        cb(null, true);\n      } else {\n        cb(new Error(`File type ${file.mimetype} not allowed. Only Excel (.xlsx, .xls) and CSV files are accepted.`));\n      }\n    }\n  });\n\n  app.post(\"/api/spreadsheet/upload\", upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const currentUser = await storage.getCurrentUser();\n      const filename = req.file.originalname;\n      const fileBuffer = req.file.buffer;\n\n      // Create upload log\n      const uploadLog = await storage.createUploadLog({\n        userId: currentUser.id,\n        filename,\n        status: \"processing\",\n      });\n\n      try {\n        const workbook = XLSX.read(fileBuffer, { type: 'buffer' });\n        \n        // Get the first sheet\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        \n        // Convert to JSON\n        const data = XLSX.utils.sheet_to_json(worksheet);\n        \n        let assignmentsCreated = 0;\n        const errors: string[] = [];\n\n        \n        // Process each row\n        for (const row of data as any[]) {\n          try {\n            // Map spreadsheet columns to assignment fields (supports multiple column name variations)\n            const title = row.Title || row.title || row.TITLE || row.Assignment || row.assignment || \n                         row.ASSIGNMENT || row.Task || row.task || row.TASK || row.Name || row.name || row.NAME;\n            \n            const subject = row.Subject || row.subject || row.SUBJECT || row.Course || row.course || \n                           row.COURSE || row.Class || row.class || row.CLASS;\n            \n            const dueDate = row['Due Date'] || row.DueDate || row['due date'] || row.dueDate || \n                           row.DUE_DATE || row['DUE Date'] || row['Due'] || row.due || row.DUE || \n                           row.Date || row.date || row.DATE || row.Deadline || row.deadline || row.DEADLINE;\n            \n            const description = row.Description || row.description || row.DESCRIPTION || \n                               row.Details || row.details || row.DETAILS || row.Notes || row.notes || \n                               row.NOTES || row.Instructions || row.instructions || row.INSTRUCTIONS || \"\";\n            \n            const priority = (row.Priority || row.priority || row.PRIORITY || row.Importance || \n                             row.importance || row.IMPORTANCE || \"medium\").toString().toLowerCase();\n            \n            const teacher = row.Teacher || row.teacher || row.TEACHER || row.Instructor || \n                           row.instructor || row.INSTRUCTOR || row.Professor || row.professor || \n                           row.PROFESSOR || \"\";\n\n            // Additional fields for better assignment tracking\n            const status = (row.Status || row.status || row.STATUS || \"pending\").toString().toLowerCase();\n            const progress = parseInt(row.Progress || row.progress || row.PROGRESS || \"0\") || 0;\n\n            if (!title || !subject || !dueDate) {\n              errors.push(`Skipping row with missing required fields: Title=\"${title}\", Subject=\"${subject}\", DueDate=\"${dueDate}\"`);\n              continue;\n            }\n\n            // Enhanced date parsing\n            let parsedDueDate: Date;\n            if (typeof dueDate === 'number') {\n              // Handle Excel serial date numbers (days since 1900-01-01)\n              parsedDueDate = new Date((dueDate - 25569) * 86400 * 1000);\n            } else if (typeof dueDate === 'string') {\n              // Try multiple date formats\n              const cleanDate = dueDate.trim();\n              parsedDueDate = new Date(cleanDate);\n              \n              // If basic parsing fails, try common formats\n              if (isNaN(parsedDueDate.getTime())) {\n                const formats = [\n                  // MM/DD/YYYY\n                  /^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/,\n                  // DD/MM/YYYY\n                  /^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/,\n                  // YYYY-MM-DD\n                  /^(\\d{4})-(\\d{1,2})-(\\d{1,2})$/,\n                ];\n                \n                for (const format of formats) {\n                  const match = cleanDate.match(format);\n                  if (match) {\n                    if (cleanDate.includes('-')) {\n                      // ISO format\n                      parsedDueDate = new Date(cleanDate);\n                    } else {\n                      // Assume MM/DD/YYYY for slash format\n                      const [, month, day, year] = match;\n                      parsedDueDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\n                    }\n                    break;\n                  }\n                }\n              }\n            } else if (typeof dueDate === 'number') {\n              // Excel date serial number\n              parsedDueDate = new Date((dueDate - 25569) * 86400 * 1000);\n            } else {\n              parsedDueDate = new Date(dueDate);\n            }\n\n            if (isNaN(parsedDueDate.getTime())) {\n              errors.push(`Invalid date format for assignment \"${title}\": ${dueDate}`);\n              continue;\n            }\n\n            // Validate and normalize priority\n            const validPriorities = ['low', 'medium', 'high'];\n            let finalPriority = 'medium';\n            \n            if (validPriorities.includes(priority)) {\n              finalPriority = priority;\n            } else if (priority.includes('high') || priority.includes('urgent') || priority === '3') {\n              finalPriority = 'high';\n            } else if (priority.includes('low') || priority === '1') {\n              finalPriority = 'low';\n            }\n\n            // Validate and normalize status\n            const validStatuses = ['pending', 'in-progress', 'completed'];\n            let finalStatus = 'pending';\n            \n            if (validStatuses.includes(status)) {\n              finalStatus = status;\n            } else if (status.includes('complete') || status.includes('done') || status.includes('finished')) {\n              finalStatus = 'completed';\n            } else if (status.includes('progress') || status.includes('working') || status.includes('started')) {\n              finalStatus = 'in-progress';\n            }\n\n            // Create assignment with all parsed data\n            const assignmentData = {\n              userId: currentUser.id,\n              title: String(title).trim(),\n              subject: String(subject).trim(),\n              description: String(description).trim(),\n              dueDate: parsedDueDate,\n              priority: finalPriority as 'low' | 'medium' | 'high',\n              status: finalStatus as 'pending' | 'in-progress' | 'completed',\n              progress: Math.min(Math.max(progress, 0), 100), // Clamp between 0-100\n              teacher: String(teacher).trim() || undefined,\n            };\n\n            // Check for duplicate assignments (same title, subject, and due date)\n            const existingAssignments = await storage.getAssignments();\n            const isDuplicate = existingAssignments.some((existing: any) => \n              existing.title === assignmentData.title &&\n              existing.subject === assignmentData.subject &&\n              new Date(existing.dueDate).toDateString() === assignmentData.dueDate.toDateString()\n            );\n\n            if (!isDuplicate) {\n              await storage.createAssignment(assignmentData);\n              assignmentsCreated++;\n            } else {\n              errors.push(`Skipping duplicate assignment: ${assignmentData.title} (${assignmentData.subject})`);\n            }\n          } catch (error: any) {\n            errors.push(`Error processing assignment: ${error.message}`);\n          }\n        }\n\n        // Update upload log\n        await storage.updateUploadLog(uploadLog.id, {\n          status: \"completed\",\n          processedAt: new Date(),\n          assignmentsCreated,\n          errorMessage: errors.length > 0 ? errors.join('; ') : null,\n        });\n\n        res.json({\n          assignmentsCreated,\n          errors: errors.length > 0 ? errors : undefined,\n          message: assignmentsCreated > 0 ? `Successfully imported ${assignmentsCreated} assignments` : 'No assignments were imported - check the errors below',\n        });\n\n      } catch (error: any) {\n        // Update upload log with error\n        await storage.updateUploadLog(uploadLog.id, {\n          status: \"failed\",\n          processedAt: new Date(),\n          errorMessage: error.message,\n        });\n\n        throw error;\n      }\n\n    } catch (error: any) {\n      console.error(\"Error processing spreadsheet:\", error);\n      res.status(500).json({ \n        message: \"Failed to process spreadsheet\", \n        error: error.message \n      });\n    }\n  });\n\n  // Google Calendar Authentication Routes\n  app.get(\"/auth/google/calendar\", async (req, res) => {\n    try {\n      const authUrl = calendarService.getAuthUrl();\n      res.redirect(authUrl);\n    } catch (error) {\n      console.error(\"Error getting Google auth URL:\", error);\n      res.status(500).json({ error: \"Failed to initiate Google Calendar authentication\" });\n    }\n  });\n\n  app.get(\"/auth/google/callback\", async (req, res) => {\n    try {\n      const { code } = req.query;\n      if (!code || typeof code !== 'string') {\n        return res.status(400).json({ error: \"Authorization code is required\" });\n      }\n\n      const tokens = await calendarService.getTokens(code);\n      const currentUser = await storage.getCurrentUser();\n      \n      // Store tokens with proper type conversion\n      const userTokens: UserCalendarTokens = {\n        access_token: tokens.access_token || '',\n        refresh_token: tokens.refresh_token || null,\n        scope: tokens.scope || '',\n        token_type: tokens.token_type || 'Bearer',\n        expiry_date: tokens.expiry_date\n      };\n      userCalendarTokens.setTokens(currentUser.id, userTokens);\n\n      // Redirect to frontend with success message\n      res.redirect(`/?calendar=connected`);\n    } catch (error) {\n      console.error(\"Error during Google Calendar OAuth callback:\", error);\n      res.redirect(`/?calendar=error`);\n    }\n  });\n\n  // Calendar status and management routes\n  app.get(\"/api/calendar/status\", async (req, res) => {\n    try {\n      const currentUser = await storage.getCurrentUser();\n      const hasTokens = userCalendarTokens.hasTokens(currentUser.id);\n      \n      res.json({ \n        connected: hasTokens,\n        userId: currentUser.id \n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to check calendar status\" });\n    }\n  });\n\n  app.post(\"/api/calendar/disconnect\", async (req, res) => {\n    try {\n      const currentUser = await storage.getCurrentUser();\n      userCalendarTokens.removeTokens(currentUser.id);\n      \n      res.json({ message: \"Google Calendar disconnected successfully\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to disconnect calendar\" });\n    }\n  });\n\n  app.post(\"/api/assignments/sync-calendar\", async (req, res) => {\n    try {\n      const currentUser = await storage.getCurrentUser();\n      const userTokens = userCalendarTokens.getTokens(currentUser.id);\n      \n      if (!userTokens) {\n        return res.status(401).json({ error: \"Google Calendar not connected\" });\n      }\n\n      const assignments = await storage.getAssignments();\n      const unsyncedAssignments = assignments.filter(a => !a.googleCalendarEventId);\n      \n      let syncedCount = 0;\n      \n      for (const assignment of unsyncedAssignments) {\n        const eventId = await calendarService.createAssignmentEvent(assignment, userTokens);\n        if (eventId) {\n          await storage.updateAssignment(assignment.id, { googleCalendarEventId: eventId });\n          syncedCount++;\n        }\n      }\n\n      res.json({ \n        message: `Successfully synced ${syncedCount} assignments to Google Calendar`,\n        syncedCount,\n        totalAssignments: unsyncedAssignments.length\n      });\n    } catch (error) {\n      console.error(\"Error syncing assignments to calendar:\", error);\n      res.status(500).json({ error: \"Failed to sync assignments to calendar\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":23989},"server/storage.ts":{"content":"import { type User, type InsertUser, type UpdateUser, type Assignment, type InsertAssignment, type UpdateAssignment, type Subject, type InsertSubject, type UploadLog, type InsertUploadLog, type UpdateUploadLog, users, assignments, subjects, uploadLogs } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUsers(): Promise<User[]>;\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: UpdateUser): Promise<User>;\n  getCurrentUser(): Promise<User>;\n  getCurrentUserId(): string;\n  switchUser(userId: string): Promise<User>;\n  \n  // Assignments\n  getAssignments(): Promise<Assignment[]>;\n  getAssignment(id: string): Promise<Assignment | undefined>;\n  createAssignment(assignment: InsertAssignment): Promise<Assignment>;\n  updateAssignment(id: string, assignment: UpdateAssignment): Promise<Assignment | undefined>;\n  deleteAssignment(id: string): Promise<boolean>;\n  getAssignmentsByStatus(status: string): Promise<Assignment[]>;\n  getAssignmentsBySubject(subject: string): Promise<Assignment[]>;\n  getUpcomingAssignments(limit?: number): Promise<Assignment[]>;\n  clearAllAssignments(): Promise<void>;\n  \n  // Subjects\n  getSubjects(): Promise<Subject[]>;\n  getSubject(id: string): Promise<Subject | undefined>;\n  createSubject(subject: InsertSubject): Promise<Subject>;\n  updateSubject(id: string, subject: Partial<InsertSubject>): Promise<Subject | undefined>;\n  deleteSubject(id: string): Promise<boolean>;\n  \n  // Upload logs\n  getUploadLogs(): Promise<UploadLog[]>;\n  createUploadLog(uploadLog: InsertUploadLog): Promise<UploadLog>;\n  updateUploadLog(id: string, uploadLog: UpdateUploadLog): Promise<UploadLog | undefined>;\n  \n  // Data management\n  clearAllData(): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private assignments: Map<string, Assignment>;\n  private subjects: Map<string, Subject>;\n  private uploadLogs: Map<string, UploadLog>;\n  private currentUserId: string;\n\n  constructor() {\n    this.users = new Map();\n    this.assignments = new Map();\n    this.subjects = new Map();\n    this.uploadLogs = new Map();\n    this.currentUserId = \"\";\n    this.initializeDefaultData();\n  }\n\n  private initializeDefaultData() {\n    // Create default users\n    const zooId = randomUUID();\n    const nishId = randomUUID();\n    \n    const defaultUsers: User[] = [\n      {\n        id: zooId,\n        name: \"Zoo\",\n        email: \"zoo@example.com\",\n        avatar: null,\n        googleId: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: nishId,\n        name: \"Nish\", \n        email: \"nish@example.com\",\n        avatar: null,\n        googleId: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ];\n\n    defaultUsers.forEach(user => {\n      this.users.set(user.id, user);\n    });\n    \n    // Set Zoo as the current user by default\n    this.currentUserId = zooId;\n\n    // Create default subjects based on user's course list\n    const defaultSubjects: Subject[] = [\n      {\n        id: randomUUID(),\n        name: \"French V\",\n        color: \"#E91E63\",\n        teacher: \"Mme. Dubois\",\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"French V Honors\",\n        color: \"#C2185B\",\n        teacher: \"Mme. Laurent\",\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"AP Physics\",\n        color: \"#2196F3\",\n        teacher: \"Dr. Newton\",\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"AP Biology\",\n        color: \"#4CAF50\",\n        teacher: \"Dr. Darwin\",\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"AP Calc BC\",\n        color: \"#FF9800\",\n        teacher: \"Mr. Euler\",\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"AP Lang\",\n        color: \"#9C27B0\",\n        teacher: \"Ms. Shakespeare\",\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: \"US History\",\n        color: \"#607D8B\",\n        teacher: \"Mr. Lincoln\",\n        createdAt: new Date(),\n      },\n    ];\n\n    defaultSubjects.forEach(subject => {\n      this.subjects.set(subject.id, subject);\n    });\n  }\n\n  // User methods\n  async getUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      email: insertUser.email || null,\n      avatar: insertUser.avatar || null,\n      googleId: insertUser.googleId || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getCurrentUser(): Promise<User> {\n    const user = this.users.get(this.currentUserId);\n    if (!user) {\n      throw new Error(\"No current user found\");\n    }\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async updateUser(id: string, updateUser: UpdateUser): Promise<User> {\n    const existingUser = this.users.get(id);\n    if (!existingUser) {\n      throw new Error(\"User not found\");\n    }\n    const updatedUser: User = {\n      ...existingUser,\n      ...updateUser,\n      updatedAt: new Date(),\n    };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async switchUser(userId: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    this.currentUserId = userId;\n    return user;\n  }\n\n  // Assignment methods\n  async getAssignments(): Promise<Assignment[]> {\n    return Array.from(this.assignments.values())\n      .filter(a => a.userId === this.currentUserId)\n      .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime());\n  }\n\n  async getAssignment(id: string): Promise<Assignment | undefined> {\n    return this.assignments.get(id);\n  }\n\n  async createAssignment(insertAssignment: InsertAssignment): Promise<Assignment> {\n    const id = randomUUID();\n    const now = new Date();\n    const assignment: Assignment = {\n      ...insertAssignment,\n      id,\n      userId: insertAssignment.userId || this.currentUserId,\n      description: insertAssignment.description || null,\n      progress: insertAssignment.progress || 0,\n      teacher: insertAssignment.teacher || null,\n      type: insertAssignment.type || null,\n      pointsEarned: insertAssignment.pointsEarned || null,\n      pointsPossible: insertAssignment.pointsPossible || null,\n      status: insertAssignment.status || \"pending\",\n      priority: insertAssignment.priority || \"medium\",\n      createdAt: now,\n      updatedAt: now,\n      googleCalendarEventId: null,\n    };\n    this.assignments.set(id, assignment);\n    return assignment;\n  }\n\n  async updateAssignment(id: string, updateAssignment: UpdateAssignment): Promise<Assignment | undefined> {\n    const existing = this.assignments.get(id);\n    if (!existing) return undefined;\n\n    const updated: Assignment = {\n      ...existing,\n      ...updateAssignment,\n      updatedAt: new Date(),\n    };\n    this.assignments.set(id, updated);\n    return updated;\n  }\n\n  async deleteAssignment(id: string): Promise<boolean> {\n    return this.assignments.delete(id);\n  }\n\n  async clearAllAssignments(): Promise<void> {\n    this.assignments.clear();\n  }\n\n  getCurrentUserId(): string {\n    return this.currentUserId;\n  }\n\n  async getAssignmentsByStatus(status: string): Promise<Assignment[]> {\n    return Array.from(this.assignments.values())\n      .filter(a => a.status === status && a.userId === this.currentUserId);\n  }\n\n  async getAssignmentsBySubject(subject: string): Promise<Assignment[]> {\n    return Array.from(this.assignments.values())\n      .filter(a => a.subject === subject && a.userId === this.currentUserId);\n  }\n\n  async getUpcomingAssignments(limit = 10): Promise<Assignment[]> {\n    const now = new Date();\n    return Array.from(this.assignments.values())\n      .filter(a => new Date(a.dueDate) >= now && a.status !== 'completed' && a.userId === this.currentUserId)\n      .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime())\n      .slice(0, limit);\n  }\n\n  // Subject methods\n  async getSubjects(): Promise<Subject[]> {\n    return Array.from(this.subjects.values());\n  }\n\n  async getSubject(id: string): Promise<Subject | undefined> {\n    return this.subjects.get(id);\n  }\n\n  async createSubject(insertSubject: InsertSubject): Promise<Subject> {\n    const id = randomUUID();\n    const subject: Subject = {\n      ...insertSubject,\n      id,\n      teacher: insertSubject.teacher || null,\n      createdAt: new Date(),\n    };\n    this.subjects.set(id, subject);\n    return subject;\n  }\n\n  async updateSubject(id: string, updateSubject: Partial<InsertSubject>): Promise<Subject | undefined> {\n    const existing = this.subjects.get(id);\n    if (!existing) return undefined;\n\n    const updated: Subject = {\n      ...existing,\n      ...updateSubject,\n    };\n    this.subjects.set(id, updated);\n    return updated;\n  }\n\n  async deleteSubject(id: string): Promise<boolean> {\n    return this.subjects.delete(id);\n  }\n\n  // Upload log methods\n  async getUploadLogs(): Promise<UploadLog[]> {\n    return Array.from(this.uploadLogs.values())\n      .filter(log => log.userId === this.currentUserId)\n      .sort((a, b) => new Date(b.uploadedAt).getTime() - new Date(a.uploadedAt).getTime());\n  }\n\n  async createUploadLog(insertUploadLog: InsertUploadLog): Promise<UploadLog> {\n    const id = randomUUID();\n    const uploadLog: UploadLog = {\n      ...insertUploadLog,\n      id,\n      uploadedAt: new Date(),\n      processedAt: insertUploadLog.processedAt || null,\n      status: insertUploadLog.status || \"pending\",\n      assignmentsCreated: insertUploadLog.assignmentsCreated || 0,\n      errorMessage: insertUploadLog.errorMessage || null,\n    };\n    this.uploadLogs.set(id, uploadLog);\n    return uploadLog;\n  }\n\n  async updateUploadLog(id: string, updateUploadLog: UpdateUploadLog): Promise<UploadLog | undefined> {\n    const existing = this.uploadLogs.get(id);\n    if (!existing) return undefined;\n\n    const updated: UploadLog = {\n      ...existing,\n      ...updateUploadLog,\n    };\n    this.uploadLogs.set(id, updated);\n    return updated;\n  }\n  async clearAllData(): Promise<void> {\n    this.assignments.clear();\n    this.subjects.clear();\n    this.uploadLogs.clear();\n    // Keep users but reinitialize default data\n    this.users.clear();\n    this.initializeDefaultData();\n  }\n}\n\nexport class DatabaseStorage implements IStorage {\n  private currentUserId: string = \"\";\n\n  constructor() {\n    this.initializeDefaultData();\n  }\n\n  private async initializeDefaultData() {\n    // Check if users exist, if not create defaults\n    const existingUsers = await this.getUsers();\n    if (existingUsers.length === 0) {\n      const zooUser = await this.createUser({\n        name: \"Zoo\",\n        email: \"zoo@example.com\",\n      });\n      const nishUser = await this.createUser({\n        name: \"Nish\", \n        email: \"nish@example.com\",\n      });\n      this.currentUserId = zooUser.id;\n\n      // Create default subjects\n      const defaultSubjects = [\n        { name: \"French V Honors\", color: \"#C2185B\", teacher: \"Mme. Laurent\" },\n        { name: \"AP Physics\", color: \"#2196F3\", teacher: \"Dr. Newton\" },\n        { name: \"AP Biology\", color: \"#4CAF50\", teacher: \"Dr. Darwin\" },\n        { name: \"AP Calc BC\", color: \"#FF9800\", teacher: \"Mr. Euler\" },\n        { name: \"AP Lang\", color: \"#9C27B0\", teacher: \"Ms. Shakespeare\" },\n        { name: \"US History\", color: \"#607D8B\", teacher: \"Mr. Lincoln\" },\n      ];\n\n      for (const subject of defaultSubjects) {\n        await this.createSubject(subject);\n      }\n    } else {\n      this.currentUserId = existingUsers[0].id;\n    }\n  }\n\n  // User operations\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        id: randomUUID(),\n        email: insertUser.email || null,\n        avatar: insertUser.avatar || null,\n        googleId: insertUser.googleId || null,\n      })\n      .returning();\n    return user;\n  }\n\n  async getCurrentUser(): Promise<User> {\n    const user = await this.getUser(this.currentUserId);\n    if (!user) {\n      throw new Error(\"No current user found\");\n    }\n    return user;\n  }\n\n  getCurrentUserId(): string {\n    return this.currentUserId;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async updateUser(id: string, updateUser: UpdateUser): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updateUser, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async switchUser(userId: string): Promise<User> {\n    const user = await this.getUser(userId);\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    this.currentUserId = userId;\n    return user;\n  }\n\n  // Assignment operations\n  async getAssignments(): Promise<Assignment[]> {\n    return await db\n      .select()\n      .from(assignments)\n      .where(eq(assignments.userId, this.currentUserId))\n      .orderBy(assignments.dueDate);\n  }\n\n  async getAssignment(id: string): Promise<Assignment | undefined> {\n    const [assignment] = await db.select().from(assignments).where(eq(assignments.id, id));\n    return assignment;\n  }\n\n  async createAssignment(insertAssignment: InsertAssignment): Promise<Assignment> {\n    const [assignment] = await db\n      .insert(assignments)\n      .values({\n        ...insertAssignment,\n        id: randomUUID(),\n        userId: insertAssignment.userId || this.currentUserId,\n        description: insertAssignment.description || null,\n        progress: insertAssignment.progress || 0,\n        teacher: insertAssignment.teacher || null,\n        status: insertAssignment.status || \"pending\",\n        priority: insertAssignment.priority || \"medium\",\n        googleCalendarEventId: null,\n      })\n      .returning();\n    return assignment;\n  }\n\n  async updateAssignment(id: string, updateAssignment: UpdateAssignment): Promise<Assignment | undefined> {\n    const [assignment] = await db\n      .update(assignments)\n      .set({ ...updateAssignment, updatedAt: new Date() })\n      .where(eq(assignments.id, id))\n      .returning();\n    return assignment;\n  }\n\n  async deleteAssignment(id: string): Promise<boolean> {\n    const result = await db.delete(assignments).where(eq(assignments.id, id));\n    return result.rowCount! > 0;\n  }\n\n  async getAssignmentsByStatus(status: string): Promise<Assignment[]> {\n    return await db\n      .select()\n      .from(assignments)\n      .where(and(\n        eq(assignments.userId, this.currentUserId), \n        eq(assignments.status, status as any)\n      ));\n  }\n\n  async getAssignmentsBySubject(subject: string): Promise<Assignment[]> {\n    return await db\n      .select()\n      .from(assignments)\n      .where(and(eq(assignments.userId, this.currentUserId), eq(assignments.subject, subject)));\n  }\n\n  async getUpcomingAssignments(limit?: number): Promise<Assignment[]> {\n    const query = db\n      .select()\n      .from(assignments)\n      .where(eq(assignments.userId, this.currentUserId))\n      .orderBy(assignments.dueDate);\n    \n    if (limit) {\n      return await query.limit(limit);\n    }\n    return await query;\n  }\n\n  async clearAllAssignments(): Promise<void> {\n    await db.delete(assignments).where(eq(assignments.userId, this.currentUserId));\n  }\n\n  // Subject operations\n  async getSubjects(): Promise<Subject[]> {\n    return await db.select().from(subjects);\n  }\n\n  async getSubject(id: string): Promise<Subject | undefined> {\n    const [subject] = await db.select().from(subjects).where(eq(subjects.id, id));\n    return subject;\n  }\n\n  async createSubject(insertSubject: InsertSubject): Promise<Subject> {\n    const [subject] = await db\n      .insert(subjects)\n      .values({\n        ...insertSubject,\n        id: randomUUID(),\n      })\n      .returning();\n    return subject;\n  }\n\n  async updateSubject(id: string, subject: Partial<InsertSubject>): Promise<Subject | undefined> {\n    const [updatedSubject] = await db\n      .update(subjects)\n      .set(subject)\n      .where(eq(subjects.id, id))\n      .returning();\n    return updatedSubject;\n  }\n\n  async deleteSubject(id: string): Promise<boolean> {\n    const result = await db.delete(subjects).where(eq(subjects.id, id));\n    return result.rowCount! > 0;\n  }\n\n  // Upload log operations\n  async getUploadLogs(): Promise<UploadLog[]> {\n    return await db.select().from(uploadLogs);\n  }\n\n  async createUploadLog(insertUploadLog: InsertUploadLog): Promise<UploadLog> {\n    const [uploadLog] = await db\n      .insert(uploadLogs)\n      .values({\n        ...insertUploadLog,\n        id: randomUUID(),\n      })\n      .returning();\n    return uploadLog;\n  }\n\n  async updateUploadLog(id: string, updateUploadLog: UpdateUploadLog): Promise<UploadLog | undefined> {\n    const [uploadLog] = await db\n      .update(uploadLogs)\n      .set(updateUploadLog)\n      .where(eq(uploadLogs.id, id))\n      .returning();\n    return uploadLog;\n  }\n\n  // Data management\n  async clearAllData(): Promise<void> {\n    // Clear all data but keep users\n    await db.delete(assignments);\n    await db.delete(subjects);\n    await db.delete(uploadLogs);\n    \n    // Reinitialize default subjects\n    const defaultSubjects = [\n      { name: \"French V Honors\", color: \"#C2185B\", teacher: \"Mme. Laurent\" },\n      { name: \"AP Physics\", color: \"#2196F3\", teacher: \"Dr. Newton\" },\n      { name: \"AP Biology\", color: \"#4CAF50\", teacher: \"Dr. Darwin\" },\n      { name: \"AP Calc BC\", color: \"#FF9800\", teacher: \"Mr. Euler\" },\n      { name: \"AP Lang\", color: \"#9C27B0\", teacher: \"Ms. Shakespeare\" },\n      { name: \"US History\", color: \"#607D8B\", teacher: \"Mr. Lincoln\" },\n    ];\n\n    for (const subject of defaultSubjects) {\n      await this.createSubject(subject);\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":18736},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").unique(),\n  avatar: text(\"avatar\"),\n  googleId: text(\"google_id\").unique(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull(),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`).notNull(),\n});\n\nexport const assignments = pgTable(\"assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  subject: text(\"subject\").notNull(),\n  dueDate: timestamp(\"due_date\").notNull(),\n  priority: text(\"priority\", { enum: [\"low\", \"medium\", \"high\"] }).notNull().default(\"medium\"),\n  status: text(\"status\", { enum: [\"pending\", \"in-progress\", \"completed\"] }).notNull().default(\"pending\"),\n  progress: integer(\"progress\").default(0),\n  teacher: text(\"teacher\"),\n  type: text(\"type\").default(\"assignment\"),\n  pointsEarned: integer(\"points_earned\"),\n  pointsPossible: integer(\"points_possible\"),\n  googleCalendarEventId: text(\"google_calendar_event_id\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull(),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`).notNull(),\n});\n\nexport const subjects = pgTable(\"subjects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  color: text(\"color\").notNull(),\n  teacher: text(\"teacher\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateUserSchema = insertUserSchema.partial();\n\nexport const insertAssignmentSchema = createInsertSchema(assignments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  googleCalendarEventId: true,\n  userId: true,\n}).extend({\n  dueDate: z.string().transform((str) => new Date(str)),\n  progress: z.number().min(0).max(100).optional(),\n});\n\nexport const updateAssignmentSchema = insertAssignmentSchema.partial();\n\nexport const insertSubjectSchema = createInsertSchema(subjects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpdateUser = z.infer<typeof updateUserSchema>;\nexport type Assignment = typeof assignments.$inferSelect;\nexport type InsertAssignment = z.infer<typeof insertAssignmentSchema>;\nexport type UpdateAssignment = z.infer<typeof updateAssignmentSchema>;\nexport type Subject = typeof subjects.$inferSelect;\nexport type InsertSubject = z.infer<typeof insertSubjectSchema>;\nexport type UpdateSubject = Partial<InsertSubject>;\n\n// Spreadsheet upload tracking\nexport const uploadLogs = pgTable(\"upload_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  filename: text(\"filename\").notNull(),\n  uploadedAt: timestamp(\"uploaded_at\").default(sql`now()`).notNull(),\n  processedAt: timestamp(\"processed_at\"),\n  status: text(\"status\", { enum: [\"pending\", \"processing\", \"completed\", \"failed\"] }).notNull().default(\"pending\"),\n  assignmentsCreated: integer(\"assignments_created\").default(0),\n  errorMessage: text(\"error_message\"),\n});\n\nexport const insertUploadLogSchema = createInsertSchema(uploadLogs).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport type UploadLog = typeof uploadLogs.$inferSelect;\nexport type InsertUploadLog = z.infer<typeof insertUploadLogSchema>;\nexport type UpdateUploadLog = Partial<InsertUploadLog>;\n","size_bytes":3834},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { TopNav } from \"@/components/navigation/top-nav\";\nimport { MobileNav } from \"@/components/navigation/mobile-nav\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Assignments from \"@/pages/assignments\";\nimport Calendar from \"@/pages/calendar\";\nimport Subjects from \"@/pages/subjects\";\nimport { Settings } from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\nimport { useState } from \"react\";\nimport { AssignmentForm } from \"@/components/assignments/assignment-form\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/assignments\" component={Assignments} />\n      <Route path=\"/calendar\" component={Calendar} />\n      <Route path=\"/subjects\" component={Subjects} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  const handleOpenForm = () => {\n    setIsFormOpen(true);\n  };\n\n  const handleCloseForm = () => {\n    setIsFormOpen(false);\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-gray-50 font-roboto\">\n          <TopNav onAddAssignment={handleOpenForm} />\n          <Router />\n          <MobileNav />\n          <AssignmentForm \n            open={isFormOpen} \n            onClose={handleCloseForm} \n          />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1794},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');\n@import url('https://fonts.googleapis.com/icon?family=Material+Icons');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(0 0% 0%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(0 0% 0%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(0 0% 0%);\n  --chart-1: hsl(0 0% 0%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(0 0% 0%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(0 0% 0%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(0 0% 0%);\n  --font-sans: 'Roboto', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  \n  /* Material Design Colors - Black Theme */\n  --material-blue-50: hsl(0 0% 96.3%);\n  --material-blue-500: hsl(0 0% 20%);\n  --material-blue-700: hsl(0 0% 10%);\n  --material-green-500: hsl(122.1 38.7% 55.3%);\n  --material-green-600: hsl(121.9 38.7% 45.1%);\n  --material-orange-500: hsl(36.7 100% 55.1%);\n  --material-orange-600: hsl(30.6 100% 47.8%);\n  --material-red-500: hsl(4.3 89.6% 58.4%);\n  --material-red-600: hsl(4.7 89.4% 51%);\n  \n  /* Material Design Shadows */\n  --shadow-material-1: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);\n  --shadow-material-2: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n  --shadow-material-3: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(0 0% 0%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Roboto', sans-serif;\n  }\n}\n\n@layer utilities {\n  .font-roboto {\n    font-family: 'Roboto', sans-serif;\n  }\n  \n  .bg-material-blue-50 {\n    background-color: var(--material-blue-50);\n  }\n  \n  .bg-material-blue-500 {\n    background-color: var(--material-blue-500);\n  }\n  \n  .bg-material-blue-700 {\n    background-color: var(--material-blue-700);\n  }\n  \n  .bg-material-green-500 {\n    background-color: var(--material-green-500);\n  }\n  \n  .bg-material-green-600 {\n    background-color: var(--material-green-600);\n  }\n  \n  .bg-material-orange-500 {\n    background-color: var(--material-orange-500);\n  }\n  \n  .bg-material-orange-600 {\n    background-color: var(--material-orange-600);\n  }\n  \n  .bg-material-red-500 {\n    background-color: var(--material-red-500);\n  }\n  \n  .bg-material-red-600 {\n    background-color: var(--material-red-600);\n  }\n  \n  .text-material-blue-500 {\n    color: var(--material-blue-500);\n  }\n  \n  .text-material-blue-700 {\n    color: var(--material-blue-700);\n  }\n  \n  .text-material-green-500 {\n    color: var(--material-green-500);\n  }\n  \n  .text-material-orange-500 {\n    color: var(--material-orange-500);\n  }\n  \n  .text-material-red-500 {\n    color: var(--material-red-500);\n  }\n  \n  .shadow-material-1 {\n    box-shadow: var(--shadow-material-1);\n  }\n  \n  .shadow-material-2 {\n    box-shadow: var(--shadow-material-2);\n  }\n  \n  .shadow-material-3 {\n    box-shadow: var(--shadow-material-3);\n  }\n  \n  .hover\\:bg-material-blue-500:hover {\n    background-color: var(--material-blue-500);\n  }\n  \n  .hover\\:bg-material-blue-700:hover {\n    background-color: var(--material-blue-700);\n  }\n  \n  .hover\\:text-material-blue-500:hover {\n    color: var(--material-blue-500);\n  }\n  \n  .hover\\:text-material-blue-700:hover {\n    color: var(--material-blue-700);\n  }\n}\n","size_bytes":5704},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n        allowedFileTypes: ['.xlsx', '.xls', '.csv'], // Only spreadsheet files\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n        setShowModal(false);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n        note=\"Only Excel (.xlsx, .xls) and CSV files are supported\"\n      />\n    </div>\n  );\n}","size_bytes":3042},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/auth/user\"],\n    retry: false,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user && !error,\n    error\n  };\n}","size_bytes":322},"client/src/lib/constants.ts":{"content":"export const PRIORITY_COLORS = {\n  low: {\n    bg: 'bg-gray-500',\n    text: 'text-white',\n  },\n  medium: {\n    bg: 'bg-orange-500',\n    text: 'text-white',\n  },\n  high: {\n    bg: 'bg-red-500',\n    text: 'text-white',\n  },\n} as const;\n\nexport const SUBJECT_COLORS = {\n  Mathematics: 'bg-blue-100 text-blue-800',\n  English: 'bg-green-100 text-green-800',\n  Science: 'bg-orange-100 text-orange-800',\n  History: 'bg-purple-100 text-purple-800',\n  Other: 'bg-gray-100 text-gray-800',\n} as const;\n\nexport const STATUS_COLORS = {\n  pending: 'bg-gray-100 text-gray-800',\n  'in-progress': 'bg-blue-100 text-blue-800',\n  completed: 'bg-green-100 text-green-800',\n} as const;\n\nexport const MATERIAL_ICONS = {\n  school: 'school',\n  dashboard: 'dashboard',\n  assignment: 'assignment',\n  calendar: 'calendar_today',\n  notifications: 'notifications',\n  add: 'add',\n  edit: 'edit',\n  delete: 'delete',\n  check: 'check_circle_outline',\n  schedule: 'schedule',\n  person: 'person',\n  upload: 'file_upload',\n  export: 'table_chart',\n  close: 'close',\n  settings: 'settings',\n  color_lens: 'color_lens',\n  palette: 'palette',\n} as const;\n","size_bytes":1116},"client/src/lib/dates.ts":{"content":"import { format, isToday, isTomorrow, isThisWeek, isPast, addDays, startOfWeek, endOfWeek } from 'date-fns';\n\nexport function formatDueDate(date: Date): string {\n  if (isToday(date)) {\n    return `Due Today, ${format(date, 'h:mm a')}`;\n  }\n  \n  if (isTomorrow(date)) {\n    return `Due Tomorrow, ${format(date, 'h:mm a')}`;\n  }\n  \n  if (isThisWeek(date)) {\n    return `Due ${format(date, 'EEEE, MMM d')}`;\n  }\n  \n  return `Due ${format(date, 'MMM d')}`;\n}\n\nexport function formatDisplayDate(date: Date): string {\n  return format(date, 'EEEE, MMMM d, yyyy');\n}\n\nexport function isOverdue(date: Date): boolean {\n  return isPast(date) && !isToday(date);\n}\n\nexport function getDueDateColor(date: Date): string {\n  if (isOverdue(date)) return 'text-red-600';\n  if (isToday(date)) return 'text-red-600';\n  if (isTomorrow(date)) return 'text-orange-600';\n  return 'text-gray-600';\n}\n\nexport function getWeekDates(): Date[] {\n  const start = startOfWeek(new Date());\n  const end = endOfWeek(new Date());\n  const dates: Date[] = [];\n  \n  for (let date = new Date(start); date <= end; date = addDays(date, 1)) {\n    dates.push(new Date(date));\n  }\n  \n  return dates;\n}\n\nexport function getCurrentMonthCalendar(): Date[] {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = now.getMonth();\n  \n  const firstDay = new Date(year, month, 1);\n  const lastDay = new Date(year, month + 1, 0);\n  const startDate = startOfWeek(firstDay);\n  const endDate = endOfWeek(lastDay);\n  \n  const dates: Date[] = [];\n  for (let date = new Date(startDate); date <= endDate; date = addDays(date, 1)) {\n    dates.push(new Date(date));\n  }\n  \n  return dates;\n}\n","size_bytes":1651},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/assignments.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AssignmentCard } from \"@/components/assignments/assignment-card\";\nimport { AssignmentForm } from \"@/components/assignments/assignment-form\";\nimport { FloatingActionButton } from \"@/components/ui/floating-action-button\";\nimport { MATERIAL_ICONS } from \"@/lib/constants\";\nimport type { Assignment } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\n\nexport default function Assignments() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingAssignment, setEditingAssignment] = useState<Assignment | undefined>();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [subjectFilter, setSubjectFilter] = useState(\"all\");\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: assignments = [], isLoading } = useQuery({\n    queryKey: [\"/api/assignments\"],\n  });\n\n  const { data: subjects = [] } = useQuery({\n    queryKey: [\"/api/subjects\"],\n  });\n\n  // Delete single assignment mutation\n  const deleteAssignmentMutation = useMutation({\n    mutationFn: async (assignmentId: string) => {\n      await apiRequest(\"DELETE\", `/api/assignments/${assignmentId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        title: \"Assignment Deleted\",\n        description: \"Assignment has been successfully deleted.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Delete Failed\",\n        description: \"Failed to delete assignment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Clear all assignments mutation\n  const clearAllAssignmentsMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", \"/api/assignments\", {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        title: \"All Assignments Cleared\",\n        description: \"All assignments have been successfully deleted.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Clear Failed\",\n        description: \"Failed to clear assignments. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredAssignments = (assignments as Assignment[]).filter((assignment: Assignment) => {\n    const matchesSearch = assignment.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         assignment.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         assignment.subject.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || assignment.status === statusFilter;\n    const matchesSubject = subjectFilter === \"all\" || assignment.subject.toLowerCase() === subjectFilter.toLowerCase();\n    \n    return matchesSearch && matchesStatus && matchesSubject;\n  });\n\n  const handleEdit = (assignment: Assignment) => {\n    setEditingAssignment(assignment);\n    setIsFormOpen(true);\n  };\n\n  const handleToggleComplete = async (assignment: Assignment) => {\n    // This would be implemented with a mutation\n    console.log(\"Toggle complete for:\", assignment.id);\n  };\n\n  const handleDelete = (assignment: Assignment) => {\n    deleteAssignmentMutation.mutate(assignment.id);\n  };\n\n  const handleClearAll = () => {\n    clearAllAssignmentsMutation.mutate();\n  };\n\n  const handleOpenForm = () => {\n    setEditingAssignment(undefined);\n    setIsFormOpen(true);\n  };\n\n  const handleCloseForm = () => {\n    setIsFormOpen(false);\n    setEditingAssignment(undefined);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 pb-20 md:pb-6\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pb-20 md:pb-6\" data-testid=\"assignments-page\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl font-medium text-gray-900 mb-6\" data-testid=\"page-title\">\n            All Assignments\n          </h1>\n\n          {/* Filters */}\n          <Card className=\"shadow-material-1 mb-6\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-medium\">Search & Filter</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <Input\n                  placeholder=\"Search assignments...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  data-testid=\"input-search\"\n                />\n                \n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger data-testid=\"select-status-filter\">\n                    <SelectValue placeholder=\"All Statuses\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Select value={subjectFilter} onValueChange={setSubjectFilter}>\n                  <SelectTrigger data-testid=\"select-subject-filter\">\n                    <SelectValue placeholder=\"All Subjects\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Subjects</SelectItem>\n                    {(subjects as any[]).map((subject) => (\n                      <SelectItem key={subject.id} value={subject.name.toLowerCase()}>\n                        {subject.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                <div className=\"flex gap-2\">\n                  <Button onClick={handleOpenForm} data-testid=\"button-add-assignment\">\n                    <span className=\"material-icons text-sm mr-2\">{MATERIAL_ICONS.add}</span>\n                    Add Assignment\n                  </Button>\n                  {(assignments as Assignment[]).length > 0 && (\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button \n                          variant=\"destructive\" \n                          data-testid=\"button-clear-all-assignments\"\n                          disabled={clearAllAssignmentsMutation.isPending}\n                        >\n                          <span className=\"material-icons text-sm mr-2\">{MATERIAL_ICONS.delete}</span>\n                          Clear All\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Clear All Assignments</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            Are you sure you want to delete all assignments? This action cannot be undone and will remove all {(assignments as Assignment[]).length} assignments.\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                          <AlertDialogAction \n                            onClick={handleClearAll}\n                            className=\"bg-red-600 hover:bg-red-700\"\n                          >\n                            Clear All Assignments\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Results Count */}\n          <div className=\"mb-4 text-sm text-gray-600\" data-testid=\"results-count\">\n            Showing {filteredAssignments.length} of {(assignments as Assignment[]).length} assignments\n          </div>\n\n          {/* Assignments List */}\n          <div className=\"space-y-4\" data-testid=\"assignments-list\">\n            {filteredAssignments.length === 0 ? (\n              <Card className=\"shadow-material-1\">\n                <CardContent className=\"py-12 text-center\">\n                  <div className=\"text-gray-500\" data-testid=\"no-assignments\">\n                    {searchTerm || statusFilter !== \"all\" || subjectFilter !== \"all\" \n                      ? \"No assignments match your search criteria.\"\n                      : \"No assignments found. Create your first assignment to get started!\"\n                    }\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              filteredAssignments.map((assignment: Assignment) => (\n                <AssignmentCard\n                  key={assignment.id}\n                  assignment={assignment}\n                  onEdit={handleEdit}\n                  onToggleComplete={handleToggleComplete}\n                  onDelete={handleDelete}\n                />\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n\n      <FloatingActionButton onClick={handleOpenForm} />\n      \n      <AssignmentForm\n        open={isFormOpen}\n        onClose={handleCloseForm}\n        assignment={editingAssignment}\n      />\n    </div>\n  );\n}\n","size_bytes":10799},"client/src/pages/calendar.tsx":{"content":"import { useState } from \"react\";\nimport { CalendarView } from \"@/components/calendar/calendar-view\";\nimport { AssignmentForm } from \"@/components/assignments/assignment-form\";\nimport { FloatingActionButton } from \"@/components/ui/floating-action-button\";\n\nexport default function Calendar() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  const handleOpenForm = () => {\n    setIsFormOpen(true);\n  };\n\n  const handleCloseForm = () => {\n    setIsFormOpen(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pb-20 md:pb-6\" data-testid=\"calendar-page\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl font-medium text-gray-900 mb-6\" data-testid=\"page-title\">\n            Calendar\n          </h1>\n          \n          <CalendarView />\n        </div>\n      </div>\n\n      <FloatingActionButton onClick={handleOpenForm} />\n      \n      <AssignmentForm\n        open={isFormOpen}\n        onClose={handleCloseForm}\n      />\n    </div>\n  );\n}\n","size_bytes":1046},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { StatsCards } from \"@/components/dashboard/stats-cards\";\nimport { UpcomingAssignments } from \"@/components/dashboard/upcoming-assignments\";\nimport { MiniCalendar } from \"@/components/dashboard/mini-calendar\";\nimport { QuickActions } from \"@/components/dashboard/quick-actions\";\nimport { AssignmentForm } from \"@/components/assignments/assignment-form\";\nimport { FloatingActionButton } from \"@/components/ui/floating-action-button\";\nimport { formatDisplayDate } from \"@/lib/dates\";\nimport { SpreadsheetUploader } from \"@/components/assignments/spreadsheet-uploader\";\nimport { SummaryView } from \"@/components/dashboard/summary-view\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/stats\"],\n  });\n  \n  const safeStats = stats as { dueToday: number; thisWeek: number; completed: number; totalActive: number } || { dueToday: 0, thisWeek: 0, completed: 0, totalActive: 0 };\n\n  const { data: currentUser } = useQuery({\n    queryKey: [\"/api/users/current\"],\n  });\n\n  const handleViewAllAssignments = () => {\n    setLocation(\"/assignments\");\n  };\n\n  const handleViewFullCalendar = () => {\n    setLocation(\"/calendar\");\n  };\n\n  const handleOpenForm = () => {\n    setIsFormOpen(true);\n  };\n\n  const handleCloseForm = () => {\n    setIsFormOpen(false);\n  };\n\n  if (statsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 pb-20 md:pb-6\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pb-20 md:pb-6\" data-testid=\"dashboard-page\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Dashboard Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6\">\n            <div>\n              <h2 className=\"text-2xl font-medium text-gray-900 mb-2\" data-testid=\"welcome-message\">\n                Welcome back, <span>{(currentUser as any)?.name || \"Student\"}</span>!\n              </h2>\n              <p className=\"text-gray-600\" data-testid=\"today-date\">\n                Today is {formatDisplayDate(new Date())}\n              </p>\n            </div>\n          </div>\n\n          {/* Quick Stats Cards */}\n          <StatsCards stats={safeStats} />\n        </div>\n\n        {/* Dashboard Tabs */}\n        <Tabs defaultValue=\"overview\" className=\"mb-6\">\n          <TabsList className=\"mb-6\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"summary\" data-testid=\"tab-summary\">Summary View</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"overview\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column: Upcoming Assignments */}\n          <div className=\"lg:col-span-2\">\n            <UpcomingAssignments onViewAll={handleViewAllAssignments} />\n          </div>\n\n          {/* Right Column: Mini Calendar & Quick Actions */}\n          <div className=\"space-y-6\">\n            <MiniCalendar onViewFull={handleViewFullCalendar} />\n            <QuickActions />\n          </div>\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"summary\">\n            <SummaryView />\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <FloatingActionButton onClick={handleOpenForm} />\n      \n      <AssignmentForm\n        open={isFormOpen}\n        onClose={handleCloseForm}\n      />\n    </div>\n  );\n}\n","size_bytes":4237},"client/src/pages/login.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { MATERIAL_ICONS } from \"@/lib/constants\";\nimport { useState } from \"react\";\n\nexport default function Login() {\n  const [error, setError] = useState<string | null>(null);\n\n  const handleGoogleLogin = () => {\n    setError(null);\n    fetch('/auth/google')\n      .then(response => {\n        if (response.status === 503) {\n          setError('Google OAuth is not configured yet. Please provide your Google OAuth credentials.');\n        } else {\n          window.location.href = '/auth/google';\n        }\n      })\n      .catch(() => {\n        window.location.href = '/auth/google';\n      });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-material-blue-50 to-material-indigo-50 flex items-center justify-center px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"bg-material-blue-500 p-3 rounded-full\">\n              <span className=\"material-icons text-3xl text-white\">\n                {MATERIAL_ICONS.school}\n              </span>\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">Welcome to Zoo</CardTitle>\n          <CardDescription className=\"text-gray-600\">\n            Your personal assignment management system\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {error && (\n            <Alert>\n              <AlertDescription className=\"text-sm\">\n                {error}\n              </AlertDescription>\n            </Alert>\n          )}\n          \n          <Button \n            onClick={handleGoogleLogin}\n            className=\"w-full bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 flex items-center justify-center space-x-2\"\n            data-testid=\"button-google-login\"\n          >\n            <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\">\n              <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n              <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n              <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n              <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n            </svg>\n            <span>Continue with Google</span>\n          </Button>\n          \n          <div className=\"text-center text-sm text-gray-500\">\n            Sign in to access your assignments and track your academic progress\n          </div>\n          \n          <div className=\"text-center text-xs text-gray-400 mt-4\">\n            <p>Need OAuth setup? Use redirect URI:</p>\n            <code className=\"text-xs bg-gray-100 px-2 py-1 rounded\">\n              https://087fea98-ad7a-4f35-a254-12ecf6c17ade-00-d45blih3a0ae.janeway.replit.dev/auth/google/callback\n            </code>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3477},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/assignments/assignment-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { MATERIAL_ICONS, PRIORITY_COLORS, SUBJECT_COLORS } from \"@/lib/constants\";\nimport { formatDueDate, getDueDateColor } from \"@/lib/dates\";\nimport type { Assignment } from \"@shared/schema\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\n\ninterface AssignmentCardProps {\n  assignment: Assignment;\n  onEdit: (assignment: Assignment) => void;\n  onToggleComplete: (assignment: Assignment) => void;\n  onDelete?: (assignment: Assignment) => void;\n  onClick?: (assignment: Assignment) => void;\n}\n\nexport function AssignmentCard({ assignment, onEdit, onToggleComplete, onDelete, onClick }: AssignmentCardProps) {\n  const priorityStyle = PRIORITY_COLORS[assignment.priority];\n  const subjectStyle = SUBJECT_COLORS[assignment.subject as keyof typeof SUBJECT_COLORS] || SUBJECT_COLORS.Other;\n  const dueDateColor = getDueDateColor(new Date(assignment.dueDate));\n\n  const handleClick = () => {\n    if (onClick) {\n      onClick(assignment);\n    }\n  };\n\n  const handleEdit = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    onEdit(assignment);\n  };\n\n  const handleToggleComplete = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    onToggleComplete(assignment);\n  };\n\n  const handleDelete = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onDelete) {\n      onDelete(assignment);\n    }\n  };\n\n  return (\n    <Card \n      className=\"border border-gray-200 rounded-lg p-4 hover:shadow-material-2 transition-shadow cursor-pointer\"\n      onClick={handleClick}\n      data-testid={`assignment-card-${assignment.id}`}\n    >\n      <CardContent className=\"p-0\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-3 mb-2\">\n              <Badge className={`${priorityStyle.bg} ${priorityStyle.text}`}>\n                {assignment.priority.charAt(0).toUpperCase() + assignment.priority.slice(1)} Priority\n              </Badge>\n              <Badge variant=\"secondary\" className={subjectStyle}>\n                {assignment.subject}\n              </Badge>\n            </div>\n            <h4 \n              className=\"text-base font-medium text-gray-900 mb-1\" \n              data-testid={`assignment-title-${assignment.id}`}\n            >\n              {assignment.title}\n            </h4>\n            {assignment.description && (\n              <p \n                className=\"text-sm text-gray-600 mb-2\" \n                data-testid={`assignment-description-${assignment.id}`}\n              >\n                {assignment.description}\n              </p>\n            )}\n            <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n              <div className=\"flex items-center space-x-1\">\n                <span className=\"material-icons text-xs\">{MATERIAL_ICONS.schedule}</span>\n                <span className={dueDateColor} data-testid={`assignment-due-date-${assignment.id}`}>\n                  {formatDueDate(new Date(assignment.dueDate))}\n                </span>\n              </div>\n              {assignment.teacher && (\n                <div className=\"flex items-center space-x-1\">\n                  <span className=\"material-icons text-xs\">{MATERIAL_ICONS.person}</span>\n                  <span data-testid={`assignment-teacher-${assignment.id}`}>{assignment.teacher}</span>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2 ml-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"p-2 hover:bg-gray-100 rounded-md transition-colors\"\n              onClick={handleEdit}\n              data-testid={`button-edit-assignment-${assignment.id}`}\n            >\n              <span className=\"material-icons text-sm text-gray-400\">{MATERIAL_ICONS.edit}</span>\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"p-2 hover:bg-green-100 rounded-md transition-colors\"\n              onClick={handleToggleComplete}\n              data-testid={`button-complete-assignment-${assignment.id}`}\n            >\n              <span className=\"material-icons text-sm text-gray-400\">{MATERIAL_ICONS.check}</span>\n            </Button>\n            {onDelete && (\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"p-2 hover:bg-red-100 rounded-md transition-colors\"\n                    data-testid={`button-delete-assignment-${assignment.id}`}\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    <span className=\"material-icons text-sm text-red-400\">{MATERIAL_ICONS.delete}</span>\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>Delete Assignment</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      Are you sure you want to delete \"{assignment.title}\"? This action cannot be undone.\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction \n                      onClick={handleDelete}\n                      className=\"bg-red-600 hover:bg-red-700\"\n                    >\n                      Delete\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            )}\n          </div>\n        </div>\n        {assignment.progress !== null && assignment.progress !== undefined && assignment.progress > 0 && (\n          <div className=\"mt-3\">\n            <Progress \n              value={assignment.progress} \n              className=\"h-2\"\n              data-testid={`assignment-progress-${assignment.id}`}\n            />\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6484},"client/src/components/assignments/assignment-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertAssignmentSchema, type InsertAssignment, type Assignment } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MATERIAL_ICONS } from \"@/lib/constants\";\nimport { format } from \"date-fns\";\nimport { Calendar } from \"lucide-react\";\n\ninterface AssignmentFormProps {\n  open: boolean;\n  onClose: () => void;\n  assignment?: Assignment;\n}\n\nexport function AssignmentForm({ open, onClose, assignment }: AssignmentFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [syncCalendar, setSyncCalendar] = useState(false);\n\n  const { data: subjects = [] } = useQuery({\n    queryKey: [\"/api/subjects\"],\n  });\n\n  // Check calendar connection status\n  const { data: calendarStatus } = useQuery({\n    queryKey: [\"/api/calendar/status\"],\n  });\n\n  // Create a simplified form with only the 3 essential fields\n  const simplifiedSchema = insertAssignmentSchema.pick({\n    subject: true,\n    title: true,\n    dueDate: true,\n  }).extend({\n    dueDate: z.string(),\n  });\n\n  type FormData = z.infer<typeof simplifiedSchema>;\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(simplifiedSchema),\n    defaultValues: {\n      subject: assignment?.subject || \"\",\n      title: assignment?.title || \"\",\n      dueDate: assignment ? format(new Date(assignment.dueDate), \"yyyy-MM-dd'T'HH:mm\") : format(new Date(), \"yyyy-MM-dd'T'23:59\"),\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertAssignment & { syncToCalendar?: boolean }) => {\n      const response = await apiRequest(\"POST\", \"/api/assignments\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Assignment created successfully!\",\n      });\n      handleClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create assignment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: InsertAssignment) => {\n      const response = await apiRequest(\"PUT\", `/api/assignments/${assignment!.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Assignment updated successfully!\",\n      });\n      handleClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update assignment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClose = () => {\n    form.reset();\n    setSyncCalendar(false);\n    onClose();\n  };\n\n  const onSubmit = (data: FormData) => {\n    // Add default values for fields not included in the simplified form\n    const submissionData: InsertAssignment & { syncToCalendar?: boolean } = {\n      userId: \"\", // Will be set by the backend\n      title: data.title,\n      subject: data.subject,\n      dueDate: new Date(data.dueDate),\n      description: \"\", // Default empty description\n      priority: \"medium\", // Default medium priority\n      status: \"pending\", // Default pending status\n      progress: 0, // Default 0% progress\n      teacher: \"\", // Default empty teacher\n      type: \"homework\", // Default homework type\n      pointsEarned: null, // Default no points earned yet\n      pointsPossible: 100, // Default 100 points possible\n      syncToCalendar: syncCalendar // Include calendar sync preference\n    };\n\n    if (assignment) {\n      updateMutation.mutate(submissionData);\n    } else {\n      createMutation.mutate(submissionData);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"w-full max-w-md\" data-testid=\"assignment-form-modal\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-lg font-medium text-gray-900\">\n              {assignment ? \"Edit Assignment\" : \"Add New Assignment\"}\n            </DialogTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleClose}\n              data-testid=\"button-close-modal\"\n            >\n              <span className=\"material-icons text-gray-400\">{MATERIAL_ICONS.close}</span>\n            </Button>\n          </div>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            {/* Subject - First Field */}\n            <FormField\n              control={form.control}\n              name=\"subject\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Subject</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-subject\">\n                        <SelectValue placeholder=\"Select subject\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {(subjects as any[]).map((subject: any) => (\n                        <SelectItem key={subject.id} value={subject.name}>\n                          {subject.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Assignment Title - Second Field */}\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Assignment</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Enter assignment title\" \n                      {...field} \n                      data-testid=\"input-assignment-title\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            {/* Due Date & Time - Third Field */}\n            <FormField\n              control={form.control}\n              name=\"dueDate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Due Date & Time</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"datetime-local\" \n                      {...field}\n                      data-testid=\"input-due-date\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Calendar Sync Checkbox - Only show for new assignments if calendar is connected */}\n            {!assignment && (calendarStatus as any)?.connected && (\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"sync-calendar\"\n                  checked={syncCalendar}\n                  onCheckedChange={(checked) => setSyncCalendar(!!checked)}\n                  data-testid=\"checkbox-sync-calendar\"\n                />\n                <label \n                  htmlFor=\"sync-calendar\" \n                  className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 flex items-center gap-2\"\n                >\n                  <Calendar className=\"h-4 w-4\" />\n                  Sync to Google Calendar\n                </label>\n              </div>\n            )}\n            \n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={handleClose}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createMutation.isPending || updateMutation.isPending}\n                data-testid=\"button-submit\"\n              >\n                {createMutation.isPending || updateMutation.isPending \n                  ? \"Saving...\" \n                  : assignment ? \"Update Assignment\" : \"Add Assignment\"\n                }\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9455},"client/src/components/assignments/spreadsheet-uploader.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MATERIAL_ICONS } from \"@/lib/constants\";\n\ninterface SpreadsheetUploaderProps {\n  onSuccess?: () => void;\n  onClose?: () => void;\n}\n\nexport function SpreadsheetUploader({ onSuccess, onClose }: SpreadsheetUploaderProps) {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [processingStatus, setProcessingStatus] = useState<string>(\"\");\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const uploadSpreadsheetMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await fetch('/api/spreadsheet/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Upload failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setIsProcessing(false);\n      setUploadProgress(100);\n      \n      if (data.assignmentsCreated > 0) {\n        setProcessingStatus(`✅ Successfully imported ${data.assignmentsCreated} assignments!`);\n        \n        toast({\n          title: \"Spreadsheet Imported Successfully!\",\n          description: `Created ${data.assignmentsCreated} assignments from your spreadsheet.`,\n        });\n\n        // Refresh all related data to update calendar and assignments\n        queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/assignments/upcoming\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/subjects\"] });\n        \n        onSuccess?.();\n      } else {\n        // Show errors when no assignments were created\n        const errorMessage = data.errors && data.errors.length > 0 \n          ? data.errors.slice(0, 3).join('; ')\n          : \"No assignments were created. Check your spreadsheet format.\";\n        \n        setProcessingStatus(`❌ ${errorMessage}`);\n        \n        toast({\n          title: \"Import Failed\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      setIsProcessing(false);\n      setProcessingStatus(`❌ Error: ${error.message}`);\n      \n      toast({\n        title: \"Import Failed\",\n        description: error.message || \"Failed to process spreadsheet\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const allowedTypes = [\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'application/vnd.ms-excel',\n        'text/csv'\n      ];\n      \n      if (allowedTypes.includes(file.type)) {\n        setSelectedFile(file);\n        setProcessingStatus(\"\");\n      } else {\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Please select an Excel (.xlsx, .xls) or CSV file\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!selectedFile) return;\n\n    setIsProcessing(true);\n    setUploadProgress(25);\n    setProcessingStatus(\"📄 Processing spreadsheet...\");\n\n    // Simulate processing steps for better UX\n    setTimeout(() => {\n      setUploadProgress(50);\n      setProcessingStatus(\"📋 Parsing assignments...\");\n    }, 1000);\n\n    setTimeout(() => {\n      setUploadProgress(75);\n      setProcessingStatus(\"📅 Creating calendar entries...\");\n    }, 2000);\n\n    setTimeout(async () => {\n      await uploadSpreadsheetMutation.mutateAsync(selectedFile);\n    }, 3000);\n  };\n\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <span className=\"material-icons text-material-blue-500\">{MATERIAL_ICONS.upload}</span>\n          Import Assignments from Spreadsheet\n        </CardTitle>\n        <CardDescription>\n          Upload an Excel or CSV file to automatically create assignments and calendar entries. \n          Your spreadsheet should include columns for Title, Subject, Due Date, and optionally Description, Priority, and Teacher.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Upload Instructions */}\n        <Alert>\n          <span className=\"material-icons mr-2\">info</span>\n          <AlertDescription>\n            <strong>Spreadsheet Format:</strong> Include columns for Title, Subject, Due Date (YYYY-MM-DD format), \n            Description (optional), Priority (low/medium/high), and Teacher (optional).\n          </AlertDescription>\n        </Alert>\n\n        {/* Upload Section */}\n        {!isProcessing && (\n          <div className=\"flex flex-col items-center space-y-4\">\n            <div className=\"w-full\">\n              <input\n                type=\"file\"\n                accept=\".xlsx,.xls,.csv\"\n                onChange={handleFileSelect}\n                className=\"w-full p-3 border border-gray-300 rounded-lg cursor-pointer hover:border-blue-400 focus:border-blue-500 focus:outline-none\"\n                disabled={isProcessing}\n              />\n              {selectedFile && (\n                <p className=\"text-sm text-gray-600 mt-2\">\n                  Selected: {selectedFile.name} ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)\n                </p>\n              )}\n            </div>\n            \n            <Button\n              onClick={handleUpload}\n              disabled={!selectedFile || isProcessing}\n              className=\"w-full h-16 text-lg bg-material-blue-500 hover:bg-material-blue-600 text-white rounded-lg shadow-md transition-all duration-200\"\n            >\n              <div className=\"flex items-center justify-center space-x-2\">\n                <span className=\"material-icons text-2xl\">cloud_upload</span>\n                <span>{isProcessing ? \"Processing...\" : \"Upload Spreadsheet\"}</span>\n              </div>\n            </Button>\n          </div>\n        )}\n\n        {/* Processing Status */}\n        {isProcessing && (\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <div className=\"text-lg font-medium mb-2\">{processingStatus}</div>\n              <Progress value={uploadProgress} className=\"w-full\" />\n              <div className=\"text-sm text-gray-500 mt-2\">{uploadProgress}% complete</div>\n            </div>\n          </div>\n        )}\n\n        {/* Success/Error Status */}\n        {!isProcessing && processingStatus && (\n          <div className=\"text-center\">\n            <div className=\"text-lg font-medium\">{processingStatus}</div>\n            {processingStatus.includes(\"✅\") && (\n              <Button \n                className=\"mt-4\" \n                onClick={() => {\n                  setProcessingStatus(\"\");\n                  setUploadProgress(0);\n                }}\n              >\n                Upload Another File\n              </Button>\n            )}\n          </div>\n        )}\n\n        {/* Sample Format */}\n        <details className=\"mt-6\">\n          <summary className=\"cursor-pointer text-sm font-medium text-material-blue-500 hover:text-material-blue-600\">\n            View Sample Spreadsheet Format\n          </summary>\n          <div className=\"mt-3 p-4 bg-gray-50 rounded-md\">\n            <div className=\"text-sm font-mono\">\n              <div className=\"grid grid-cols-6 gap-2 mb-2 font-bold\">\n                <div>Title</div>\n                <div>Subject</div>\n                <div>Due Date</div>\n                <div>Description</div>\n                <div>Priority</div>\n                <div>Teacher</div>\n              </div>\n              <div className=\"grid grid-cols-6 gap-2 text-xs\">\n                <div>Math Homework</div>\n                <div>Mathematics</div>\n                <div>2025-08-25</div>\n                <div>Chapter 5 exercises</div>\n                <div>medium</div>\n                <div>Mr. Smith</div>\n              </div>\n              <div className=\"grid grid-cols-6 gap-2 text-xs\">\n                <div>History Essay</div>\n                <div>History</div>\n                <div>2025-08-30</div>\n                <div>WWI research paper</div>\n                <div>high</div>\n                <div>Ms. Johnson</div>\n              </div>\n            </div>\n          </div>\n        </details>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9066},"client/src/components/calendar/calendar-view.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { format, addMonths, subMonths, startOfMonth, endOfMonth, startOfWeek, endOfWeek, addDays, isSameMonth, isSameDay, isToday } from \"date-fns\";\nimport type { Assignment } from \"@shared/schema\";\n\nexport function CalendarView() {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [view, setView] = useState<\"month\" | \"week\">(\"month\");\n\n  const { data: assignments = [] } = useQuery({\n    queryKey: [\"/api/assignments\"],\n  });\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(monthStart);\n  const startDate = startOfWeek(monthStart);\n  const endDate = endOfWeek(monthEnd);\n\n  const getAssignmentsForDate = (date: Date) => {\n    return (assignments as Assignment[]).filter((assignment: Assignment) => {\n      const assignmentDate = new Date(assignment.dueDate);\n      return isSameDay(assignmentDate, date);\n    });\n  };\n\n  const renderCalendarDay = (day: Date) => {\n    const dayAssignments = getAssignmentsForDate(day);\n    const formattedDate = format(day, \"d\");\n\n    return (\n      <div\n        key={day.toString()}\n        className={`min-h-[120px] p-2 border border-gray-200 ${\n          !isSameMonth(day, monthStart)\n            ? \"bg-gray-50 text-gray-400\"\n            : isToday(day)\n            ? \"bg-blue-50\"\n            : \"bg-white\"\n        }`}\n        data-testid={`calendar-day-${format(day, 'yyyy-MM-dd')}`}\n      >\n        <div className={`text-sm font-medium mb-1 ${\n          isToday(day) ? \"text-blue-600\" : \"\"\n        }`}>\n          {formattedDate}\n        </div>\n        <div className=\"space-y-1\">\n          {dayAssignments.slice(0, 3).map((assignment: Assignment) => (\n            <div\n              key={assignment.id}\n              className=\"text-xs p-1 rounded bg-blue-100 text-blue-800 truncate\"\n              title={assignment.title}\n              data-testid={`calendar-assignment-${assignment.id}`}\n            >\n              {assignment.title}\n            </div>\n          ))}\n          {dayAssignments.length > 3 && (\n            <div className=\"text-xs text-gray-500\">\n              +{dayAssignments.length - 3} more\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderCalendarGrid = () => {\n    const rows = [];\n    let days = [];\n    let day = startDate;\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        days.push(renderCalendarDay(day));\n        day = addDays(day, 1);\n      }\n      rows.push(\n        <div className=\"grid grid-cols-7\" key={day.toString()}>\n          {days}\n        </div>\n      );\n      days = [];\n    }\n    return rows;\n  };\n\n  const onPrevMonth = () => {\n    setCurrentDate(subMonths(currentDate, 1));\n  };\n\n  const onNextMonth = () => {\n    setCurrentDate(addMonths(currentDate, 1));\n  };\n\n  return (\n    <Card className=\"shadow-material-1\" data-testid=\"calendar-view\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-xl font-medium text-gray-900\">\n            {format(currentDate, 'MMMM yyyy')}\n          </CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"flex items-center space-x-1 mr-4\">\n              <Button\n                variant={view === \"month\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setView(\"month\")}\n                data-testid=\"button-month-view\"\n              >\n                Month\n              </Button>\n              <Button\n                variant={view === \"week\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setView(\"week\")}\n                data-testid=\"button-week-view\"\n              >\n                Week\n              </Button>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={onPrevMonth}\n              data-testid=\"button-prev-month\"\n            >\n              <span className=\"material-icons text-sm\">chevron_left</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={onNextMonth}\n              data-testid=\"button-next-month\"\n            >\n              <span className=\"material-icons text-sm\">chevron_right</span>\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        {/* Calendar Header */}\n        <div className=\"grid grid-cols-7 border-b border-gray-200 mb-0\">\n          {[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].map((day) => (\n            <div key={day} className=\"p-3 text-sm font-medium text-gray-500 text-center\">\n              {day}\n            </div>\n          ))}\n        </div>\n        \n        {/* Calendar Body */}\n        <div className=\"space-y-0\">\n          {renderCalendarGrid()}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5076},"client/src/components/dashboard/mini-calendar.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { MATERIAL_ICONS } from \"@/lib/constants\";\nimport { format, addMonths, subMonths, startOfMonth, endOfMonth, startOfWeek, endOfWeek, addDays, isSameMonth, isSameDay, isToday } from \"date-fns\";\n\ninterface MiniCalendarProps {\n  onViewFull: () => void;\n}\n\nexport function MiniCalendar({ onViewFull }: MiniCalendarProps) {\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(monthStart);\n  const startDate = startOfWeek(monthStart);\n  const endDate = endOfWeek(monthEnd);\n\n  const dateFormat = \"d\";\n  const rows = [];\n  let days = [];\n  let day = startDate;\n  let formattedDate = \"\";\n\n  while (day <= endDate) {\n    for (let i = 0; i < 7; i++) {\n      formattedDate = format(day, dateFormat);\n      const cloneDay = day;\n      \n      days.push(\n        <div\n          key={day.toString()}\n          className={`text-center py-2 cursor-pointer hover:bg-gray-100 rounded ${\n            !isSameMonth(day, monthStart)\n              ? \"text-gray-400\"\n              : isSameDay(day, new Date())\n              ? \"bg-material-blue-500 text-white rounded-full\"\n              : isToday(day)\n              ? \"bg-material-blue-500 text-white rounded-full\"\n              : \"\"\n          }`}\n          onClick={() => console.log(\"Selected date:\", cloneDay)}\n          data-testid={`calendar-day-${format(day, 'yyyy-MM-dd')}`}\n        >\n          {formattedDate}\n        </div>\n      );\n      day = addDays(day, 1);\n    }\n    rows.push(\n      <div className=\"grid grid-cols-7 gap-1\" key={day.toString()}>\n        {days}\n      </div>\n    );\n    days = [];\n  }\n\n  const onPrevMonth = () => {\n    setCurrentDate(subMonths(currentDate, 1));\n  };\n\n  const onNextMonth = () => {\n    setCurrentDate(addMonths(currentDate, 1));\n  };\n\n  return (\n    <Card className=\"shadow-material-1\" data-testid=\"mini-calendar\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-medium text-gray-900\">\n            {format(currentDate, 'MMMM yyyy')}\n          </CardTitle>\n          <div className=\"flex items-center space-x-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"p-1 hover:bg-gray-100 rounded\"\n              onClick={onPrevMonth}\n              data-testid=\"button-prev-month\"\n            >\n              <span className=\"material-icons text-sm\">chevron_left</span>\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"p-1 hover:bg-gray-100 rounded\"\n              onClick={onNextMonth}\n              data-testid=\"button-next-month\"\n            >\n              <span className=\"material-icons text-sm\">chevron_right</span>\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        {/* Calendar Header */}\n        <div className=\"grid grid-cols-7 gap-1 text-xs font-medium text-gray-500 mb-2\">\n          <div className=\"text-center py-2\">S</div>\n          <div className=\"text-center py-2\">M</div>\n          <div className=\"text-center py-2\">T</div>\n          <div className=\"text-center py-2\">W</div>\n          <div className=\"text-center py-2\">T</div>\n          <div className=\"text-center py-2\">F</div>\n          <div className=\"text-center py-2\">S</div>\n        </div>\n        \n        {/* Calendar Body */}\n        <div className=\"space-y-1\">\n          {rows}\n        </div>\n        \n        <div className=\"mt-4 pt-4 border-t border-gray-200\">\n          <Button\n            variant=\"ghost\"\n            className=\"w-full text-material-blue-700 hover:text-material-blue-500 font-medium text-sm\"\n            onClick={onViewFull}\n            data-testid=\"button-view-full-calendar\"\n          >\n            View Full Calendar\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4076},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MATERIAL_ICONS } from \"@/lib/constants\";\nimport { SpreadsheetUploader } from \"@/components/assignments/spreadsheet-uploader\";\nimport { DataManagement } from \"@/components/ui/data-management\";\n\nexport function QuickActions() {\n  const { toast } = useToast();\n  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);\n\n  const importCalendarMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/google/calendar/import\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Import Started\",\n        description: \"Google Calendar import is in progress...\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Import Failed\",\n        description: \"Failed to import from Google Calendar. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const exportSheetsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/google/sheets/export\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Export Started\",\n        description: \"Your schedule is being exported to Google Sheets...\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export to Google Sheets. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = () => {\n    setIsUploadDialogOpen(true);\n  };\n\n  const actions = [\n    {\n      title: \"📅 Import from Google Calendar\",\n      description: \"Sync your existing events\",\n      icon: MATERIAL_ICONS.calendar,\n      bgColor: \"bg-blue-500 bg-opacity-10\",\n      iconColor: \"text-blue-500\",\n      onClick: () => importCalendarMutation.mutate(),\n      testId: \"button-import-calendar\",\n      disabled: importCalendarMutation.isPending,\n    },\n    {\n      title: \"📊 Import Assignment Files\",\n      description: \"Upload Excel/CSV files with your assignments\",\n      icon: MATERIAL_ICONS.upload,\n      bgColor: \"bg-green-500 bg-opacity-10\",\n      iconColor: \"text-green-500\",\n      onClick: handleFileUpload,\n      testId: \"button-upload-spreadsheet\",\n      disabled: false,\n    },\n    {\n      title: \"📤 Export to Google Sheets\",\n      description: \"Download your schedule\",\n      icon: MATERIAL_ICONS.export,\n      bgColor: \"bg-orange-500 bg-opacity-10\",\n      iconColor: \"text-orange-500\",\n      onClick: () => exportSheetsMutation.mutate(),\n      testId: \"button-export-sheets\",\n      disabled: exportSheetsMutation.isPending,\n    },\n\n  ];\n\n  return (\n    <>\n      <Card className=\"shadow-material-1\" data-testid=\"quick-actions\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-medium text-gray-900\">Quick Actions - v2.0</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {actions.map((action) => (\n              <Button\n                key={action.testId}\n                variant=\"ghost\"\n                className=\"w-full flex items-center space-x-3 p-3 text-left hover:bg-gray-50 rounded-lg transition-colors h-auto\"\n                onClick={action.onClick}\n                disabled={action.disabled}\n                data-testid={action.testId}\n              >\n                <div className={`p-2 ${action.bgColor} rounded-lg flex-shrink-0`}>\n                  <span className={`material-icons ${action.iconColor} text-sm`}>\n                    {action.icon}\n                  </span>\n                </div>\n                <div className=\"text-left\">\n                  <p className=\"font-medium text-gray-900\">{action.title}</p>\n                  <p className=\"text-xs text-gray-500\">{action.description}</p>\n                </div>\n              </Button>\n            ))}\n            \n            {/* Data Management Section */}\n            <div className=\"pt-3 border-t border-gray-200\">\n              <DataManagement />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Dialog open={isUploadDialogOpen} onOpenChange={setIsUploadDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Upload Spreadsheet</DialogTitle>\n          </DialogHeader>\n          <SpreadsheetUploader onClose={() => setIsUploadDialogOpen(false)} />\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":4819},"client/src/components/dashboard/stats-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { MATERIAL_ICONS } from \"@/lib/constants\";\n\ninterface StatsCardsProps {\n  stats: {\n    dueToday: number;\n    thisWeek: number;\n    completed: number;\n    totalActive: number;\n  };\n}\n\nexport function StatsCards({ stats }: StatsCardsProps) {\n  const cardData = [\n    {\n      title: \"Due Today\",\n      value: stats.dueToday,\n      icon: MATERIAL_ICONS.assignment,\n      bgColor: \"bg-red-500 bg-opacity-10\",\n      iconColor: \"text-red-500\",\n      testId: \"card-due-today\"\n    },\n    {\n      title: \"This Week\",\n      value: stats.thisWeek,\n      icon: MATERIAL_ICONS.schedule,\n      bgColor: \"bg-orange-500 bg-opacity-10\",\n      iconColor: \"text-orange-500\",\n      testId: \"card-this-week\"\n    },\n    {\n      title: \"Completed\",\n      value: stats.completed,\n      icon: MATERIAL_ICONS.check,\n      bgColor: \"bg-green-500 bg-opacity-10\",\n      iconColor: \"text-green-500\",\n      testId: \"card-completed\"\n    },\n    {\n      title: \"Total Active\",\n      value: stats.totalActive,\n      icon: MATERIAL_ICONS.assignment,\n      bgColor: \"bg-blue-500 bg-opacity-10\",\n      iconColor: \"text-blue-500\",\n      testId: \"card-total-active\"\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {cardData.map((card) => (\n        <Card key={card.title} className=\"shadow-material-1\" data-testid={card.testId}>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className={`p-3 ${card.bgColor} rounded-lg`}>\n                <span className={`material-icons ${card.iconColor}`}>\n                  {card.icon}\n                </span>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">{card.title}</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid={`${card.testId}-value`}>\n                  {card.value}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2094},"client/src/components/dashboard/upcoming-assignments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AssignmentCard } from \"@/components/assignments/assignment-card\";\nimport { AssignmentForm } from \"@/components/assignments/assignment-form\";\nimport { MATERIAL_ICONS } from \"@/lib/constants\";\nimport type { Assignment } from \"@shared/schema\";\n\ninterface UpcomingAssignmentsProps {\n  onViewAll: () => void;\n}\n\nexport function UpcomingAssignments({ onViewAll }: UpcomingAssignmentsProps) {\n  const [filter, setFilter] = useState(\"all\");\n  const [editingAssignment, setEditingAssignment] = useState<Assignment | undefined>();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  const { data: assignments = [], isLoading } = useQuery({\n    queryKey: [\"/api/assignments/upcoming\", { limit: 5 }],\n  });\n\n  const { data: subjects = [] } = useQuery({\n    queryKey: [\"/api/subjects\"],\n  });\n\n  const filteredAssignments = (assignments as Assignment[]).filter((assignment: Assignment) => {\n    if (filter === \"all\") return true;\n    return assignment.subject.toLowerCase() === filter.toLowerCase();\n  });\n\n  const handleEdit = (assignment: Assignment) => {\n    setEditingAssignment(assignment);\n    setIsFormOpen(true);\n  };\n\n  const handleToggleComplete = async (assignment: Assignment) => {\n    // This would be implemented with a mutation to update assignment status\n    console.log(\"Toggle complete for:\", assignment.id);\n  };\n\n  const handleCloseForm = () => {\n    setIsFormOpen(false);\n    setEditingAssignment(undefined);\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-material-1\">\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-20 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Card className=\"shadow-material-1\" data-testid=\"upcoming-assignments-card\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-medium text-gray-900\">\n              Upcoming Assignments\n            </CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <Select value={filter} onValueChange={setFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-filter-subject\">\n                  <SelectValue placeholder=\"All Subjects\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Subjects</SelectItem>\n                  {(subjects as any[]).map((subject) => (\n                    <SelectItem key={subject.id} value={subject.name.toLowerCase()}>\n                      {subject.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"p-2 hover:bg-gray-100 rounded-md transition-colors\"\n                data-testid=\"button-toggle-view\"\n              >\n                <span className=\"material-icons text-sm\">{MATERIAL_ICONS.assignment}</span>\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <div className=\"space-y-4\" data-testid=\"assignments-list\">\n            {filteredAssignments.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\" data-testid=\"no-assignments\">\n                No upcoming assignments found.\n              </div>\n            ) : (\n              filteredAssignments.map((assignment: Assignment) => (\n                <AssignmentCard\n                  key={assignment.id}\n                  assignment={assignment}\n                  onEdit={handleEdit}\n                  onToggleComplete={handleToggleComplete}\n                />\n              ))\n            )}\n          </div>\n\n          <div className=\"mt-6 text-center\">\n            <Button\n              variant=\"ghost\"\n              className=\"text-material-blue-700 hover:text-material-blue-500 font-medium text-sm\"\n              onClick={onViewAll}\n              data-testid=\"button-view-all\"\n            >\n              View All Assignments\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <AssignmentForm\n        open={isFormOpen}\n        onClose={handleCloseForm}\n        assignment={editingAssignment}\n      />\n    </>\n  );\n}\n","size_bytes":4732},"client/src/components/navigation/mobile-nav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { MATERIAL_ICONS } from \"@/lib/constants\";\n\nexport function MobileNav() {\n  const [location] = useLocation();\n\n  const navItems = [\n    { path: \"/\", label: \"Dashboard\", icon: MATERIAL_ICONS.dashboard },\n    { path: \"/assignments\", label: \"Tasks\", icon: MATERIAL_ICONS.assignment },\n    { path: \"/calendar\", label: \"Calendar\", icon: MATERIAL_ICONS.calendar },\n    { path: \"/subjects\", label: \"Subjects\", icon: \"color_lens\" },\n    { path: \"/settings\", label: \"Settings\", icon: MATERIAL_ICONS.settings },\n  ];\n\n  return (\n    <div className=\"md:hidden fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 z-40\">\n      <div className=\"flex justify-around py-2\">\n        {navItems.map((item) => (\n          <Link key={item.path} href={item.path}>\n            <Button\n              variant=\"ghost\"\n              className={`flex flex-col items-center py-2 px-4 ${\n                location === item.path \n                  ? 'text-black' \n                  : 'text-gray-500 hover:text-black'\n              }`}\n              data-testid={`mobile-nav-${item.label.toLowerCase()}`}\n            >\n              <span className=\"material-icons text-sm\">{item.icon}</span>\n              <span className=\"text-xs mt-1\">{item.label}</span>\n            </Button>\n          </Link>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1419},"client/src/components/navigation/top-nav.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { MATERIAL_ICONS } from \"@/lib/constants\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\ninterface TopNavProps {\n  onAddAssignment: () => void;\n}\n\nexport function TopNav({ onAddAssignment }: TopNavProps) {\n  const [location] = useLocation();\n  const [showNotifications, setShowNotifications] = useState(false);\n  const queryClient = useQueryClient();\n\n  const { data: currentUser } = useQuery({\n    queryKey: [\"/api/users/current\"],\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  const switchUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/users/switch\", { userId });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/current\"] });\n    },\n  });\n\n  const handleUserSwitch = (userId: string) => {\n    if (userId !== (currentUser as any)?.id) {\n      switchUserMutation.mutate(userId);\n    }\n  };\n\n  const navItems = [\n    { path: \"/\", label: \"Dashboard\", icon: MATERIAL_ICONS.dashboard },\n    { path: \"/assignments\", label: \"Assignments\", icon: MATERIAL_ICONS.assignment },\n    { path: \"/calendar\", label: \"Calendar\", icon: MATERIAL_ICONS.calendar },\n    { path: \"/subjects\", label: \"Subjects\", icon: \"color_lens\" },\n    { path: \"/settings\", label: \"Settings\", icon: MATERIAL_ICONS.settings },\n  ];\n\n  return (\n    <nav className=\"bg-black text-white shadow-material-2 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"material-icons text-2xl\" data-testid=\"logo-icon\">\n                {MATERIAL_ICONS.school}\n              </span>\n              <h1 className=\"text-xl font-medium\" data-testid=\"app-title\">Zoo</h1>\n            </div>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-6\">\n            {navItems.map((item) => (\n              <Link key={item.path} href={item.path}>\n                <Button\n                  variant=\"ghost\"\n                  className={`flex items-center space-x-1 px-3 py-2 rounded-md hover:bg-gray-800 transition-colors text-white hover:text-white ${\n                    location === item.path ? 'bg-gray-800' : ''\n                  }`}\n                  data-testid={`nav-${item.label.toLowerCase()}`}\n                >\n                  <span className=\"material-icons text-sm\">{item.icon}</span>\n                  <span>{item.label}</span>\n                </Button>\n              </Link>\n            ))}\n          </div>\n\n          {/* User Menu */}\n          <div className=\"flex items-center space-x-4\">\n            {/* User Switcher */}\n            <Select \n              value={(currentUser as any)?.id || \"\"} \n              onValueChange={handleUserSwitch}\n            >\n              <SelectTrigger className=\"w-auto bg-transparent border-none text-white hover:bg-gray-800 focus:ring-0 focus:ring-offset-0\">\n                <div className=\"flex items-center space-x-2\">\n                  <Avatar className=\"w-8 h-8 bg-material-green-500\">\n                    <AvatarFallback className=\"text-white text-sm font-medium\">\n                      {(currentUser as any)?.name?.slice(0, 2).toUpperCase() || \"??\"}\n                    </AvatarFallback>\n                  </Avatar>\n                  <span className=\"hidden sm:block text-sm\" data-testid=\"text-username\">\n                    {(currentUser as any)?.name || \"Loading...\"}\n                  </span>\n                </div>\n              </SelectTrigger>\n              <SelectContent>\n                {(users as User[]).map((user: User) => (\n                  <SelectItem key={user.id} value={user.id}>\n                    <div className=\"flex items-center space-x-2\">\n                      <Avatar className=\"w-6 h-6 bg-material-green-500\">\n                        <AvatarFallback className=\"text-white text-xs font-medium\">\n                          {user.name.slice(0, 2).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span>{user.name}</span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"p-2 rounded-full hover:bg-material-blue-500 transition-colors text-white hover:text-white\"\n              onClick={() => setShowNotifications(!showNotifications)}\n              data-testid=\"button-notifications\"\n            >\n              <span className=\"material-icons\">{MATERIAL_ICONS.notifications}</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5509},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/floating-action-button.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { MATERIAL_ICONS } from \"@/lib/constants\";\n\ninterface FloatingActionButtonProps {\n  onClick: () => void;\n}\n\nexport function FloatingActionButton({ onClick }: FloatingActionButtonProps) {\n  return (\n    <Button\n      className=\"fixed bottom-20 md:bottom-6 right-6 bg-material-blue-500 text-white p-4 rounded-full shadow-material-3 hover:bg-material-blue-700 transition-colors z-40 h-auto w-auto\"\n      onClick={onClick}\n      data-testid=\"floating-action-button\"\n    >\n      <span className=\"material-icons text-2xl\">{MATERIAL_ICONS.add}</span>\n    </Button>\n  );\n}\n","size_bytes":621},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/dashboard/summary-view.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { SubjectBadge } from \"@/components/ui/subject-badge\";\nimport { SubjectDot } from \"@/components/ui/subject-dot\";\nimport { CheckCircle2, Clock, AlertTriangle, Calendar, Trash2 } from \"lucide-react\";\nimport type { Assignment } from \"@shared/schema\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { MATERIAL_ICONS } from \"@/lib/constants\";\n\ninterface AssignmentSummary extends Assignment {\n  daysUntilDue: number;\n}\n\nexport function SummaryView() {\n  const { data: assignments = [], isLoading } = useQuery<Assignment[]>({\n    queryKey: [\"/api/assignments\"],\n  });\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Delete single assignment mutation\n  const deleteAssignmentMutation = useMutation({\n    mutationFn: async (assignmentId: string) => {\n      await apiRequest(\"DELETE\", `/api/assignments/${assignmentId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        title: \"Assignment Deleted\",\n        description: \"Assignment has been successfully deleted.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Delete Failed\",\n        description: \"Failed to delete assignment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i} className=\"h-48 animate-pulse\">\n              <CardContent className=\"flex items-center justify-center h-full\">\n                <div className=\"w-24 h-24 bg-gray-200 rounded-full\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate summary statistics\n  const totalAssignments = assignments.length;\n  const completedCount = assignments.filter(a => a.status === \"completed\").length;\n  const inProgressCount = assignments.filter(a => a.status === \"in-progress\").length;\n  const notStartedCount = assignments.filter(a => a.status === \"pending\").length;\n  const completionRate = totalAssignments > 0 ? Math.round((completedCount / totalAssignments) * 100) : 0;\n\n  // Calculate assignments with grades\n  const assignmentsWithGrades = assignments.filter(a => a.pointsEarned !== null && a.pointsPossible !== null);\n  const totalPointsEarned = assignmentsWithGrades.reduce((sum, a) => sum + (a.pointsEarned || 0), 0);\n  const totalPointsPossible = assignmentsWithGrades.reduce((sum, a) => sum + (a.pointsPossible || 0), 0);\n  const averageGrade = totalPointsPossible > 0 ? Math.round((totalPointsEarned / totalPointsPossible) * 100) : 0;\n\n  // Prepare assignments with days until due\n  const assignmentsWithDays: AssignmentSummary[] = assignments.map(assignment => {\n    const dueDate = new Date(assignment.dueDate);\n    const today = new Date();\n    const diffTime = dueDate.getTime() - today.getTime();\n    const daysUntilDue = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    return {\n      ...assignment,\n      daysUntilDue\n    };\n  });\n\n  // Sort assignments by due date\n  const sortedAssignments = assignmentsWithDays.sort((a, b) => a.daysUntilDue - b.daysUntilDue);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-green-100 text-green-800\";\n      case \"in-progress\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"pending\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return <CheckCircle2 className=\"h-4 w-4 text-green-600\" />;\n      case \"in-progress\":\n        return <Clock className=\"h-4 w-4 text-blue-600\" />;\n      case \"pending\":\n        return <AlertTriangle className=\"h-4 w-4 text-gray-600\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"text-red-600\";\n      case \"medium\":\n        return \"text-yellow-600\";\n      case \"low\":\n        return \"text-green-600\";\n      default:\n        return \"text-gray-600\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"summary-view\">\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {/* Percent Submitted */}\n        <Card className=\"shadow-material-1\">\n          <CardHeader className=\"text-center pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">Percent Submitted</CardTitle>\n          </CardHeader>\n          <CardContent className=\"pt-0\">\n            <div className=\"flex items-center justify-center\">\n              <div className=\"relative w-32 h-32\">\n                <svg className=\"w-32 h-32 transform -rotate-90\" viewBox=\"0 0 100 100\">\n                  {/* Background circle */}\n                  <circle\n                    cx=\"50\"\n                    cy=\"50\"\n                    r=\"40\"\n                    stroke=\"#f3f4f6\"\n                    strokeWidth=\"8\"\n                    fill=\"transparent\"\n                  />\n                  {/* Progress circle */}\n                  <circle\n                    cx=\"50\"\n                    cy=\"50\"\n                    r=\"40\"\n                    stroke=\"#ec4899\"\n                    strokeWidth=\"8\"\n                    fill=\"transparent\"\n                    strokeDasharray={`${(completionRate * 251.2) / 100} 251.2`}\n                    strokeLinecap=\"round\"\n                  />\n                </svg>\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <span className=\"text-2xl font-bold text-gray-900\">{completionRate}%</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Status Distribution */}\n        <Card className=\"shadow-material-1\">\n          <CardHeader className=\"text-center pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">Status</CardTitle>\n          </CardHeader>\n          <CardContent className=\"pt-0 space-y-3\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-blue-500 rounded-sm\"></div>\n                  <span className=\"text-sm text-gray-600\">in progress</span>\n                </div>\n                <span className=\"text-sm font-medium\">{inProgressCount}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-red-400 rounded-sm\"></div>\n                  <span className=\"text-sm text-gray-600\">complete</span>\n                </div>\n                <span className=\"text-sm font-medium\">{completedCount}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-gray-300 rounded-sm\"></div>\n                  <span className=\"text-sm text-gray-600\">not started</span>\n                </div>\n                <span className=\"text-sm font-medium\">{notStartedCount}</span>\n              </div>\n            </div>\n            \n            {/* Status bar */}\n            <div className=\"w-full bg-gray-200 rounded-full h-2 overflow-hidden\">\n              <div className=\"h-full flex\">\n                <div \n                  className=\"bg-blue-500 h-full\" \n                  style={{ width: `${totalAssignments > 0 ? (inProgressCount / totalAssignments) * 100 : 0}%` }}\n                ></div>\n                <div \n                  className=\"bg-red-400 h-full\" \n                  style={{ width: `${totalAssignments > 0 ? (completedCount / totalAssignments) * 100 : 0}%` }}\n                ></div>\n                <div \n                  className=\"bg-gray-300 h-full\" \n                  style={{ width: `${totalAssignments > 0 ? (notStartedCount / totalAssignments) * 100 : 0}%` }}\n                ></div>\n              </div>\n            </div>\n            \n            {/* Numbers */}\n            <div className=\"flex justify-center space-x-8 text-xs text-gray-500 pt-2\">\n              <span>0</span>\n              <span>1</span>\n              <span>2</span>\n              <span>3</span>\n              <span>4</span>\n              <span>5</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Grades */}\n        <Card className=\"shadow-material-1\">\n          <CardHeader className=\"text-center pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">Grades</CardTitle>\n          </CardHeader>\n          <CardContent className=\"pt-0\">\n            <div className=\"flex items-center justify-center\">\n              <div className=\"relative w-32 h-32\">\n                <svg className=\"w-32 h-32 transform -rotate-90\" viewBox=\"0 0 100 100\">\n                  {/* Background circle */}\n                  <circle\n                    cx=\"50\"\n                    cy=\"50\"\n                    r=\"40\"\n                    stroke=\"#f3f4f6\"\n                    strokeWidth=\"8\"\n                    fill=\"transparent\"\n                  />\n                  {/* Progress circle */}\n                  <circle\n                    cx=\"50\"\n                    cy=\"50\"\n                    r=\"40\"\n                    stroke=\"#10b981\"\n                    strokeWidth=\"8\"\n                    fill=\"transparent\"\n                    strokeDasharray={`${(averageGrade * 251.2) / 100} 251.2`}\n                    strokeLinecap=\"round\"\n                  />\n                </svg>\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <span className=\"text-2xl font-bold text-gray-900\">{averageGrade}%</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Assignment Table */}\n      <Card className=\"shadow-material-1\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-medium text-gray-900\">Assignment Overview</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-gray-200 text-xs text-gray-500 uppercase tracking-wide\">\n                  <th className=\"text-left py-3 px-2\">Class</th>\n                  <th className=\"text-left py-3 px-2\">Assignment</th>\n                  <th className=\"text-left py-3 px-2\">Due Date</th>\n                  <th className=\"text-left py-3 px-2\">Due Time</th>\n                  <th className=\"text-left py-3 px-2\">Type</th>\n                  <th className=\"text-left py-3 px-2\">Status</th>\n                  <th className=\"text-left py-3 px-2\">Points Earned/Possible</th>\n                  <th className=\"text-left py-3 px-2\">Grade</th>\n                  <th className=\"text-left py-3 px-2\">Days Until</th>\n                  <th className=\"text-center py-3 px-2\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"text-sm\">\n                {sortedAssignments.length === 0 ? (\n                  <tr>\n                    <td colSpan={10} className=\"text-center py-8 text-gray-500\">\n                      No assignments found. Upload a spreadsheet or create assignments to see them here.\n                    </td>\n                  </tr>\n                ) : (\n                  sortedAssignments.map((assignment) => {\n                    // Calculate days until due date\n                    const now = new Date();\n                    const dueDate = new Date(assignment.dueDate);\n                    const timeDiff = dueDate.getTime() - now.getTime();\n                    const daysUntil = Math.ceil(timeDiff / (1000 * 3600 * 24));\n                    \n                    return (\n                      <tr key={assignment.id} className=\"border-b border-gray-100 hover:bg-gray-50\" data-testid={`assignment-row-${assignment.id}`}>\n                        {/* Class */}\n                        <td className=\"py-3 px-2\">\n                          <SubjectBadge \n                            subjectName={assignment.subject}\n                            variant=\"outline\"\n                            size=\"sm\"\n                          />\n                        </td>\n                        {/* Assignment */}\n                        <td className=\"py-3 px-2 max-w-48\">\n                          <div className=\"truncate font-medium text-gray-900\">{assignment.title}</div>\n                        </td>\n                        {/* Due Date */}\n                        <td className=\"py-3 px-2 text-gray-600\">\n                          {new Date(assignment.dueDate).toLocaleDateString('en-US', { \n                            month: 'short', \n                            day: 'numeric',\n                            year: 'numeric'\n                          })}\n                        </td>\n                        {/* Due Time */}\n                        <td className=\"py-3 px-2 text-gray-600\">\n                          {new Date(assignment.dueDate).toLocaleTimeString('en-US', { \n                            hour: 'numeric',\n                            minute: '2-digit',\n                            hour12: true\n                          })}\n                        </td>\n                        {/* Type */}\n                        <td className=\"py-3 px-2 text-gray-600 capitalize\">\n                          {assignment.type || 'Assignment'}\n                        </td>\n                        {/* Status */}\n                        <td className=\"py-3 px-2\">\n                          <div className=\"flex items-center gap-2\">\n                            {getStatusIcon(assignment.status)}\n                            <Badge variant=\"secondary\" className={getStatusColor(assignment.status)}>\n                              {assignment.status}\n                            </Badge>\n                          </div>\n                        </td>\n                        {/* Points Earned/Possible */}\n                        <td className=\"py-3 px-2 text-center\">\n                          {assignment.pointsEarned && assignment.pointsPossible ? (\n                            `${assignment.pointsEarned}/${assignment.pointsPossible}`\n                          ) : assignment.pointsPossible ? (\n                            `—/${assignment.pointsPossible}`\n                          ) : '—'}\n                        </td>\n                        {/* Grade */}\n                        <td className=\"py-3 px-2 text-center font-medium\">\n                          {assignment.pointsEarned && assignment.pointsPossible ? (\n                            <span className={assignment.pointsEarned / assignment.pointsPossible >= 0.9 ? 'text-green-600' : assignment.pointsEarned / assignment.pointsPossible >= 0.8 ? 'text-yellow-600' : 'text-red-600'}>\n                              {Math.round((assignment.pointsEarned / assignment.pointsPossible) * 100)}%\n                            </span>\n                          ) : '—'}\n                        </td>\n                        {/* Days Until */}\n                        <td className=\"py-3 px-2\">\n                          <div className=\"flex items-center gap-1\">\n                            <Calendar className=\"h-3 w-3 text-gray-400\" />\n                            <span className={`text-sm ${daysUntil <= 1 ? 'text-red-600 font-medium' : daysUntil <= 3 ? 'text-yellow-600 font-medium' : 'text-gray-600'}`}>\n                              {daysUntil > 0 ? `${daysUntil}d` : daysUntil === 0 ? 'Today' : `${Math.abs(daysUntil)}d ago`}\n                            </span>\n                          </div>\n                        </td>\n                        {/* Actions */}\n                        <td className=\"py-3 px-2 text-center\">\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"h-8 w-8 p-0 hover:bg-red-50\"\n                                data-testid={`button-delete-summary-${assignment.id}`}\n                              >\n                                <span className=\"material-icons text-sm text-red-400 hover:text-red-600\">\n                                  {MATERIAL_ICONS.delete}\n                                </span>\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Delete Assignment</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Are you sure you want to delete \"{assignment.title}\"? This action cannot be undone.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction \n                                  onClick={() => deleteAssignmentMutation.mutate(assignment.id)}\n                                  className=\"bg-red-600 hover:bg-red-700\"\n                                >\n                                  Delete\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </td>\n                      </tr>\n                    );\n                  })\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":18860},"client/src/components/ui/data-management.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Trash2, Settings } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function DataManagement() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const clearDataMutation = useMutation({\n    mutationFn: () => apiRequest(\"DELETE\", \"/api/data/clear\", {}),\n    onSuccess: () => {\n      toast({\n        title: \"Data Cleared\",\n        description: \"All assignments and data have been successfully cleared.\",\n      });\n      \n      // Invalidate all queries to refresh the UI\n      queryClient.invalidateQueries();\n      \n      setIsAlertOpen(false);\n      setIsDialogOpen(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to clear data. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Error clearing data:\", error);\n    },\n  });\n\n  const handleClearData = () => {\n    clearDataMutation.mutate();\n  };\n\n  return (\n    <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n      <DialogTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"gap-2\"\n          data-testid=\"button-data-management\"\n        >\n          <Settings className=\"h-4 w-4\" />\n          Data Management\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Data Management</DialogTitle>\n          <DialogDescription>\n            Manage your application data and settings.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 py-4\">\n          <div className=\"rounded-lg border p-4\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <Trash2 className=\"h-5 w-5 text-destructive\" />\n              <h3 className=\"font-medium\">Clear All Data</h3>\n            </div>\n            <p className=\"text-sm text-muted-foreground mb-3\">\n              This will permanently delete all assignments, upload logs, and reset subjects to defaults. \n              User accounts will be preserved.\n            </p>\n            <Button\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={() => setIsAlertOpen(true)}\n              disabled={clearDataMutation.isPending}\n              data-testid=\"button-clear-data\"\n            >\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              Clear All Data\n            </Button>\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={() => setIsDialogOpen(false)}\n            data-testid=\"button-close-dialog\"\n          >\n            Close\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n\n      <AlertDialog open={isAlertOpen} onOpenChange={setIsAlertOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete:\n              <ul className=\"list-disc list-inside mt-2 space-y-1\">\n                <li>All assignments and tasks</li>\n                <li>All upload history and logs</li>\n                <li>All custom subjects (will reset to defaults)</li>\n              </ul>\n              <strong className=\"block mt-2\">User accounts will be preserved.</strong>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-clear\">\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleClearData}\n              disabled={clearDataMutation.isPending}\n              className=\"bg-destructive hover:bg-destructive/90\"\n              data-testid=\"button-confirm-clear\"\n            >\n              {clearDataMutation.isPending ? \"Clearing...\" : \"Yes, clear all data\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </Dialog>\n  );\n}","size_bytes":4796}}}